import{_ as l,o as e,c as i,a as r}from"./app.7a3b308a.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"输入URL后发生了什么","slug":"输入url后发生了什么","link":"#输入url后发生了什么","children":[{"level":3,"title":"判断输入的内容","slug":"判断输入的内容","link":"#判断输入的内容","children":[]},{"level":3,"title":"检测HSTS列表","slug":"检测hsts列表","link":"#检测hsts列表","children":[]},{"level":3,"title":"DNS","slug":"dns","link":"#dns","children":[]},{"level":3,"title":"建立TCP","slug":"建立tcp","link":"#建立tcp","children":[]},{"level":3,"title":"解析HTML","slug":"解析html","link":"#解析html","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]}],"relativePath":"interview/Browser/输入URL后发生了什么.md"}'),t={name:"interview/Browser/输入URL后发生了什么.md"},a=r('<h2 id="输入url后发生了什么" tabindex="-1">输入URL后发生了什么 <a class="header-anchor" href="#输入url后发生了什么" aria-hidden="true">#</a></h2><h3 id="判断输入的内容" tabindex="-1">判断输入的内容 <a class="header-anchor" href="#判断输入的内容" aria-hidden="true">#</a></h3><p>首先浏览器会将用户输入的内容进行判断</p><p>判断输入的是URL地址还是关键词</p><p>如果发现非ASCII的unicode字符时，会进行转义</p><h3 id="检测hsts列表" tabindex="-1">检测HSTS列表 <a class="header-anchor" href="#检测hsts列表" aria-hidden="true">#</a></h3><p>浏览器检查自带的“预加载HSTS”列表</p><p>列表里包括了只能使用https进行连接的URL，如果用户输入的URL存在这个列表中则使用HTTPS</p><h3 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-hidden="true">#</a></h3><ul><li>查看浏览器中的DNS缓存，如果没有找到下一步</li><li>查找操作系统中的DNS缓存，如果没有找到下一步</li><li>查找系统中查找host文件看看有没有对应的地址，如果没有找到下一步</li><li>在系统的LDNS查找对应的域名对应IP地址 <ul><li>这一步可能会出现DNS污染的情况</li><li>解决方案：</li><li>切换DNS服务器</li><li>清空DNS缓存</li></ul></li><li>如果在LDNS没有找到，发起一个NDS解析请求 <ul><li>LDNS向根域名服务器发起请求，RNDS返回一级域名对应的ip地址</li><li>LDNS向一级域名服务器发起请求，得到二级域名对应的IP地址</li><li>LDNS向二级域名服务器发起请求，得到三级域名对应的IP地址</li><li>LDNS将得到的IP地址返回给操作系，并将这个IP地址缓存起来</li><li>操作系统再把ip地址给浏览器，将ip地址缓存起来到浏览器中</li><li>浏览器最终拿到了这个域名对应的IP地址，开始访问这个ip</li></ul></li></ul><h3 id="建立tcp" tabindex="-1">建立TCP <a class="header-anchor" href="#建立tcp" aria-hidden="true">#</a></h3><h3 id="解析html" tabindex="-1">解析HTML <a class="header-anchor" href="#解析html" aria-hidden="true">#</a></h3><p>解析请求回来的HTML页面</p><ul><li>浏览器分有<code>browser</code>进程和<code>GPU</code>进程</li><li>browser主进程主要负责 <ul><li>下载页面的网络文件</li><li>负责将渲染进程得到数据渲染到页面上</li><li>负责创建和销毁tab进程</li><li>负责和用户交互</li></ul></li><li>GPU进程主要负责 <ul><li>负责3D绘制，当页面需要进行硬件加速的时候才会使用到它，<strong>否则是使用渲染进程来绘制页面的</strong></li></ul></li><li>渲染进程，又称浏览器的内核，每个tab标签对应一个独立的渲染进程，渲染进程是多线程的 <ul><li>JS进程 <ul><li>JS内核，解析JS脚本，执行JS脚本</li><li>和GUI线程互斥，当JS引擎在运行时，GUI线程会被挂起</li><li>worker线程是附属的主进程，无法操作DOM，有复杂的计算处理可以使用它</li></ul></li><li>GUI渲染进程 <ul><li>解析HTML为DOM树，解析CSS为CSSOM树，布局layout，绘制paint</li><li>在页面重排和重绘时使用</li><li>与JS进程是互斥的</li></ul></li></ul></li></ul><p>在解析HTML的过程中，将HTML解析成DOM树，把CSS样式表解析程CSSOM树（这个过程是同步的，两个线程在进行）</p><p>如果遇到外部资源时，会额外去请求外部资源（这个资源可能是CSS，js文件）</p><blockquote><p>减少CSS阻塞时间可以通过消减CSS，懒加载非主要CSS，内联主要CSS优化</p><p>如果使用了构建工具，可以通过插件进行优化，常见的</p><ul><li>webpack：optimize-css-assets-webpack-plugin</li><li>Gulp：gulp-clean-css</li><li>Rollup：rollup-plugin-css-porter</li></ul></blockquote><p>如果遇到script标签，会根据<code>async/defer</code>属性进行不同的处理。</p><div class="tip custom-block"><p class="custom-block-title">扩展</p><p><code>async</code>（异步） 并行下载<code>script</code>脚本（不会中断<code>HTML</code>解析过程），下载完毕之后中断<code>HTML</code>解析，执行脚本内容.</p><p><code>defer</code>（延迟） 并行下载<code>script</code>脚本（不会中断<code>HTML</code>解析过程），在执行<code>DOMContentLoaded</code>事件之前，将下载好的<code>script</code>内容执行。</p><p>默认行为是 在下载script脚本时会中断HTML解析，如果脚本内容比较大时，会导致加载时间较久，无法很快渲染出整个页面</p></div><p>解析完毕后，浏览器会开始布局CSSOM树并把它绘制到页面中</p><p>这里涉及到了回流和重绘</p><div class="tip custom-block"><p class="custom-block-title">扩展</p><p><strong>回流</strong></p><p>如果元素的几何信息受到改变（元素位置，宽高...），浏览器就会触发重新计算元素在视图内的几何属性，这个过程叫做回流</p><p><strong>重绘</strong></p><p>当元素外观发生改变，但没有改变布局的情况下，重新绘画这个元素就是重绘</p><p>常见会引起重绘的属性有color、border、visibility、background、outline</p></div><p>页面在加载中，一定会经过回流和重绘</p><p>注意，在这个过程中，很消耗性能，造成卡顿，在开发中尽可能减少回流和重绘</p><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/133906695" target="_blank" rel="noreferrer">从输入 URL 到页面展示到底发生了什么？看完吊打面试官！</a></li><li><a href="https://web.dev/howbrowserswork/" target="_blank" rel="noreferrer">How browsers work</a></li><li><a href="https://web.dev/i18n/zh/optimize-lcp/#render-blocking-resources" target="_blank" rel="noreferrer">优化 Largest Contentful Paint 最大内容绘制</a></li></ul>',26),s=[a];function o(c,d,p,n,h,u){return e(),i("div",null,s)}const b=l(t,[["render",o]]);export{_ as __pageData,b as default};
