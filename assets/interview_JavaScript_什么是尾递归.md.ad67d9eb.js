import{_ as s,o as a,c as n,a as t}from"./app.089648b3.js";const D=JSON.parse('{"title":"什么是尾递归","description":"","frontmatter":{"title":"什么是尾递归","tags":["JavaScript"]},"headers":[{"level":2,"title":"什么是尾递归","slug":"什么是尾递归","link":"#什么是尾递归","children":[]}],"relativePath":"interview/JavaScript/什么是尾递归.md"}'),e={name:"interview/JavaScript/什么是尾递归.md"},l=t(`<h2 id="什么是尾递归" tabindex="-1">什么是尾递归 <a class="header-anchor" href="#什么是尾递归" aria-hidden="true">#</a></h2><p>尾递归指的是在递归函数时，在<code>return</code>时调用起另外一个函数</p><p>代码执行是基于执行栈的，所以当在一个函数里调用另外一个函数时，会保留当前函数上下文，在新建一个执行上下文加入到栈中</p><p>如果是采用尾递归方式，在最后返回的时候可以不保留当前执行上下文，达到节省内存优化，也就是常说的尾递归优化</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 尾递归</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>但是不建议使用尾递归，因为不方便后续debugger，而且ES6中默认尾递归是无效的 在V8中尾递归优化功能已经被移除了，也是因为尾递归会破坏函数的调用栈信息 <a href="https://github.com/tc39/proposal-ptc-syntax" target="_blank" rel="noreferrer">proposal-ptc-syntax</a></p></blockquote>`,6),o=[l];function p(c,r,i,y,_,F){return a(),n("div",null,o)}const f=s(e,[["render",p]]);export{D as __pageData,f as default};
