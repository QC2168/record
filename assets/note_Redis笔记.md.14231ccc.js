import{_ as l,c as e,o as s,a}from"./app.b9c86669.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"string类型数据的基本操作","slug":"string类型数据的基本操作","link":"#string类型数据的基本操作","children":[]},{"level":2,"title":"string类型数据的扩展操作","slug":"string类型数据的扩展操作","link":"#string类型数据的扩展操作","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"string作为数值操作","slug":"string作为数值操作","link":"#string作为数值操作","children":[]},{"level":2,"title":"key的设置约定","slug":"key的设置约定","link":"#key的设置约定","children":[]},{"level":2,"title":"hash类型","slug":"hash类型","link":"#hash类型","children":[]},{"level":2,"title":"hash类型数据的基本操作","slug":"hash类型数据的基本操作","link":"#hash类型数据的基本操作","children":[]},{"level":2,"title":"hash类型数据操作的注意事项","slug":"hash类型数据操作的注意事项","link":"#hash类型数据操作的注意事项","children":[]},{"level":2,"title":"list类型","slug":"list类型","link":"#list类型","children":[]},{"level":2,"title":"list类型数据基本操作","slug":"list类型数据基本操作","link":"#list类型数据基本操作","children":[]},{"level":2,"title":"list类型数据操作注意事项","slug":"list类型数据操作注意事项","link":"#list类型数据操作注意事项","children":[]},{"level":2,"title":"set类型","slug":"set类型","link":"#set类型","children":[]},{"level":2,"title":"set类型数据基本操作","slug":"set类型数据基本操作","link":"#set类型数据基本操作","children":[]},{"level":2,"title":"set类型数据操作的注意事项","slug":"set类型数据操作的注意事项","link":"#set类型数据操作的注意事项","children":[]},{"level":2,"title":"sorted_set","slug":"sorted-set","link":"#sorted-set","children":[]},{"level":2,"title":"sorted_set类型数据基本操作","slug":"sorted-set类型数据基本操作","link":"#sorted-set类型数据基本操作","children":[]},{"level":2,"title":"注意的地方","slug":"注意的地方","link":"#注意的地方","children":[]},{"level":2,"title":"sorted_set类型数据操作注意事项","slug":"sorted-set类型数据操作注意事项","link":"#sorted-set类型数据操作注意事项","children":[]},{"level":2,"title":"key通用操作","slug":"key通用操作","link":"#key通用操作","children":[]},{"level":2,"title":"key的特征","slug":"key的特征","link":"#key的特征","children":[]},{"level":2,"title":"key基本操作","slug":"key基本操作","link":"#key基本操作","children":[]},{"level":2,"title":"key扩展操作","slug":"key扩展操作","link":"#key扩展操作","children":[]},{"level":2,"title":"key查询操作","slug":"key查询操作","link":"#key查询操作","children":[]},{"level":2,"title":"key其他操作","slug":"key其他操作","link":"#key其他操作","children":[]},{"level":2,"title":"数据库通用指令","slug":"数据库通用指令","link":"#数据库通用指令","children":[]},{"level":2,"title":"key重复问题","slug":"key重复问题","link":"#key重复问题","children":[]},{"level":2,"title":"解决方案","slug":"解决方案-1","link":"#解决方案-1","children":[]},{"level":2,"title":"db基本操作","slug":"db基本操作","link":"#db基本操作","children":[]},{"level":2,"title":"db数据清除","slug":"db数据清除","link":"#db数据清除","children":[]},{"level":2,"title":"持久化过程保存什么","slug":"持久化过程保存什么","link":"#持久化过程保存什么","children":[]},{"level":2,"title":"RDB","slug":"rdb","link":"#rdb","children":[]},{"level":2,"title":"RDB启动方式 —— save命令","slug":"rdb启动方式-——-save命令","link":"#rdb启动方式-——-save命令","children":[]},{"level":2,"title":"RDB启动 save指令配置","slug":"rdb启动-save指令配置","link":"#rdb启动-save指令配置","children":[]},{"level":2,"title":"杀掉进程","slug":"杀掉进程","link":"#杀掉进程","children":[]},{"level":2,"title":"save 指令不建议使用，可能会导致阻塞","slug":"save-指令不建议使用-可能会导致阻塞","link":"#save-指令不建议使用-可能会导致阻塞","children":[]},{"level":2,"title":"RDB启动方式 —— bgsave命令","slug":"rdb启动方式-——-bgsave命令","link":"#rdb启动方式-——-bgsave命令","children":[]},{"level":2,"title":"bgsave相关配置","slug":"bgsave相关配置","link":"#bgsave相关配置","children":[]},{"level":2,"title":"RDB启动方式 —— save配置","slug":"rdb启动方式-——-save配置","link":"#rdb启动方式-——-save配置","children":[]},{"level":2,"title":"AOF","slug":"aof","link":"#aof","children":[]},{"level":2,"title":"RDB存储的弊端","slug":"rdb存储的弊端","link":"#rdb存储的弊端","children":[]},{"level":2,"title":"解决思路","slug":"解决思路","link":"#解决思路","children":[]},{"level":2,"title":"AOF概念","slug":"aof概念","link":"#aof概念","children":[]},{"level":2,"title":"AOF写数据过程","slug":"aof写数据过程","link":"#aof写数据过程","children":[]},{"level":2,"title":"AOF写数据三种策略","slug":"aof写数据三种策略","link":"#aof写数据三种策略","children":[]},{"level":2,"title":"AOF功能开启","slug":"aof功能开启","link":"#aof功能开启","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"配置","slug":"配置-1","link":"#配置-1","children":[]},{"level":2,"title":"作用","slug":"作用-1","link":"#作用-1","children":[]},{"level":2,"title":"配置","slug":"配置-2","link":"#配置-2","children":[]},{"level":2,"title":"作用","slug":"作用-2","link":"#作用-2","children":[]},{"level":2,"title":"配置","slug":"配置-3","link":"#配置-3","children":[]},{"level":2,"title":"作用","slug":"作用-3","link":"#作用-3","children":[]},{"level":2,"title":"AOF会遇到的问题","slug":"aof会遇到的问题","link":"#aof会遇到的问题","children":[]},{"level":2,"title":"AOF重写","slug":"aof重写","link":"#aof重写","children":[]},{"level":2,"title":"AOF重写作用","slug":"aof重写作用","link":"#aof重写作用","children":[]},{"level":2,"title":"AOF重写规则","slug":"aof重写规则","link":"#aof重写规则","children":[]},{"level":2,"title":"AOF重写方式","slug":"aof重写方式","link":"#aof重写方式","children":[]}],"relativePath":"note/Redis笔记.md"}'),i={name:"note/Redis笔记.md"},n=a(`<p>Redis</p><p>Remote DIctionary Server C语言开发的开源高性能键值对数据库</p><p>特征：</p><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能---</li><li>多数据类型支持 <ol><li>字符串string</li><li>列表list</li><li>散列类型hash</li><li>集合类型set</li><li>有序集合类型 sorted_set</li></ol></li><li>持久化支持，可以进行数据灾难恢复</li></ol><p>应用：</p><ol><li>为热点数据加速查询，如热点商品，热点新闻，推广类等高访问量信息等</li><li>任务队列，如秒杀，抢购，购票排队等</li><li>即时信息查询，如网站访问统计，在线人数，设备信息等</li><li>时效性信息控制，如验证码控制，投票控制等</li><li>分布式数据共享，如分布式群架构中的session分离</li><li>消息队列</li><li>分布式锁</li></ol><p>核心文件：</p><p>redis-server.exe 服务器启动命令</p><p>redis-cli.exe 命令行客户端</p><p>redis.windows.conf redis核心配置文件</p><p>redis.benchmark.exe 性能测试工具</p><p>redis-check-aof.exe Aof文件修复工具</p><p>redia-check-dump.exe RDB文件检查工具（快照持久化文件）</p><p>命令</p><p>功能：设置key value 数据</p><p>命令</p><p>set key value</p><p>规范</p><p>set name itheima</p><p>信息查询</p><p>功能：根据key查询对应的value，如果不存在，返回null</p><p>命令：</p><p>get key</p><p>规范</p><p>get name</p><p>清除屏幕信息</p><p>功能：清除屏幕中的信息</p><p>命令</p><p>clear</p><p>帮助</p><p>功能：获取命令帮助</p><p>命令</p><p>help 命令名</p><p>退出客户端</p><p>功能：退出</p><p>命令</p><p>quit | exit</p><p>redis数据存储格式</p><ul><li>redis自身是一个map，其中所有的数据都是采用key - value 的形式存储</li><li>数据类型指的是存储的数据的类型，也就是calue部分的类型，key部分永久都是字符串</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h2><p>string</p><p>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</p><p>数据存储格式：一个存储空间保存一个数据</p><p>存储内容：通常使用字符串，如果字符串以整数形式展示，可以作为数字操作使用</p><h2 id="string类型数据的基本操作" tabindex="-1">string类型数据的基本操作 <a class="header-anchor" href="#string类型数据的基本操作" aria-hidden="true">#</a></h2><ul><li>添加/修改数据 set key value</li><li>获取数据 get key</li><li>删除数据 del key</li><li>添加/修改多个数据 mset key1 value1 key2 value</li><li>获取多个数据 mget key1 key2</li><li>获取数据字符个数（字符串长度） strlen key</li><li>追加信息到原色信息后部（如果原始信息存在就追加，否则新建） append key value</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">C:\\Users\\qiancheng</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">redis</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli.exe </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">h </span><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">6379</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#A6ACCD;"> v1 </span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#A6ACCD;">OK</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> v1</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> mget </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">,</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) (nil)</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> mget b1,b2,b3</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) (nil)</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> mget b1 b2 b3</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) (nil)</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) (nil)</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) (nil)</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> mset b b1 c c2 d d3</span></span>
<span class="line"><span style="color:#A6ACCD;">OK</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> mget b c d</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">d3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">append</span><span style="color:#A6ACCD;"> b </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">integer</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b1100</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="string类型数据的扩展操作" tabindex="-1">string类型数据的扩展操作 <a class="header-anchor" href="#string类型数据的扩展操作" aria-hidden="true">#</a></h2><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-hidden="true">#</a></h2><p>设置数值数据增加指定范围的值</p><ul><li>incr key 自增</li><li>incrby key increment 自增指定数</li><li>incrbyfloat key increment 自增指定浮点数</li></ul><p>设置数值数据减少指定范围的值</p><ul><li><p>decr key 自减</p></li><li><p>decrby key increment 自减指定数</p></li></ul><h2 id="string作为数值操作" tabindex="-1">string作为数值操作 <a class="header-anchor" href="#string作为数值操作" aria-hidden="true">#</a></h2><ul><li><p>string在redis内部存的是字符串，当遇到增减类操作incr，decr时会转成数值型计算</p></li><li><p>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响</p></li><li><p>注意：按数组进行操作的数据，如果原始数据无法转成数值，或者超越redis数值上限范围，将报错</p></li><li><p>9223372036854775807（java，long型数据最大值，long Max_VALUE）</p></li><li><p>设置数据具有指定的生命周期</p></li><li><p>setex key seconds value</p></li><li><p>psetex key milliseconds value</p></li><li><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> setex t </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">OK</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> t</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> t</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> t</span></span>
<span class="line"><span style="color:#A6ACCD;">(nil)</span></span>
<span class="line"><span style="color:#F78C6C;">127</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">6379</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#A6ACCD;"> t</span></span>
<span class="line"><span style="color:#A6ACCD;"># 5秒过去  消失</span></span>
<span class="line"></span></code></pre></div></li></ul><p>string类型数据操作的注意事项</p><ul><li>数据操作不成功的反馈与数据正常操作之间的差异 <ul><li>表示运行结果是否成功 <ul><li>（integer）0 》 false 失败</li><li>（integer）1 》 true 成功</li></ul></li><li>表示运行结果值 <ul><li>（integer）3 》3 3个</li><li>（integer） 1 》 1 1个</li></ul></li><li>数据未获取到 <ul><li>(nil) 等同于null</li></ul></li><li>数据最大存储量 <ul><li>512MB</li></ul></li><li>数值计算最大范围 （java 中的 long 的最大值） <ul><li>9223372036854775807</li></ul></li></ul></li></ul><h2 id="key的设置约定" tabindex="-1">key的设置约定 <a class="header-anchor" href="#key的设置约定" aria-hidden="true">#</a></h2><p>数据库中的热点数据key命名惯例</p><table><thead><tr><th></th><th>表名</th><th>主键名</th><th>主键值</th><th>字段名</th></tr></thead><tbody><tr><td>eg1</td><td>order</td><td>id</td><td>211333</td><td>name</td></tr><tr><td>eg2</td><td>equip</td><td>id</td><td>332323</td><td>type</td></tr><tr><td>eg3</td><td>news</td><td>id</td><td>42343</td><td>title</td></tr></tbody></table><h2 id="hash类型" tabindex="-1">hash类型 <a class="header-anchor" href="#hash类型" aria-hidden="true">#</a></h2><ul><li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li>需要的存储结构：一个存储空间保存多个键值对数据</li><li>hash类型：底层使用哈希表结构实现数据存储</li><li>hash存储结构优化 <ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>如果field数量较多，存储结构使用HashMap结构</li></ul></li></ul><h2 id="hash类型数据的基本操作" tabindex="-1">hash类型数据的基本操作 <a class="header-anchor" href="#hash类型数据的基本操作" aria-hidden="true">#</a></h2><ul><li>添加修改数据</li><li><code>hset key field value</code></li><li>获取数据</li><li><code>hget key field</code></li><li><code>hgetall key</code></li><li>删除数据</li><li><code>hdel key field1 ...</code></li><li>添加修改 多个数据</li><li><code>hmset key field1 value1 field2 value2 ...</code></li><li>获取多个数据</li><li><code>hmget key field</code></li><li>获取哈希表中字段的数量</li><li><code>hlen key</code></li><li>获取哈希表中是否存在指定字段</li><li><code>hexists key field</code></li><li>获取哈希表中所有字段名或字段值</li><li><code>hkeys key</code></li><li><code>hvals key</code></li><li>设置指定字段的数值数据增加指定范围的值</li><li><code>hincrby key field increment</code></li><li><code>hincrbyfloat key field increment</code></li></ul><h2 id="hash类型数据操作的注意事项" tabindex="-1">hash类型数据操作的注意事项 <a class="header-anchor" href="#hash类型数据操作的注意事项" aria-hidden="true">#</a></h2><ul><li>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为Null</li><li>每个hash可以存储2 的三十二次方-1个键值对</li><li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了储存大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</li><li>hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率就会很低，有可能成为数据访问瓶颈</li></ul><h2 id="list类型" tabindex="-1">list类型 <a class="header-anchor" href="#list类型" aria-hidden="true">#</a></h2><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构实现</li></ul><h2 id="list类型数据基本操作" tabindex="-1">list类型数据基本操作 <a class="header-anchor" href="#list类型数据基本操作" aria-hidden="true">#</a></h2><ul><li>添加/修改数据</li><li><code>lpush key value1 [value2]</code></li><li><code>rpush key value1 [value2]</code></li><li>获取数据</li><li><code>lrange key start stop</code></li><li><code>lindex key index</code></li><li><code>llen key</code></li><li>获取并移除数据</li><li><code>lpop key</code></li><li><code>rpop key</code></li><li>规定时间内获取并移除数据</li><li><code>blpop key1 [key2] timeout</code></li><li><code>brpop key1 [key2] timeout</code></li><li>移除指定数据</li><li><code>lrem key count value</code></li></ul><h2 id="list类型数据操作注意事项" tabindex="-1">list类型数据操作注意事项 <a class="header-anchor" href="#list类型数据操作注意事项" aria-hidden="true">#</a></h2><ul><li>list中保存的数据都是string类型的，数据总容量是有限的，最多4294967295</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</li><li>获取全部数据操作结束索引设置为 -1</li><li>list可以对数据进行分页操作，通常第一页的信息来自于list，第二页及更多的信息通过数据库的形式加载</li></ul><h2 id="set类型" tabindex="-1">set类型 <a class="header-anchor" href="#set类型" aria-hidden="true">#</a></h2><ul><li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型 与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许查重复的</li></ul><h2 id="set类型数据基本操作" tabindex="-1">set类型数据基本操作 <a class="header-anchor" href="#set类型数据基本操作" aria-hidden="true">#</a></h2><ul><li>添加数据</li><li><code>sadd key member1 [member2]</code></li><li>查询数据</li><li><code>smembers key</code></li><li>删除数据</li><li><code>srem key</code></li><li>获取集合数据总量</li><li><code>scard key</code></li><li>判断集合中是否包含指定数据</li><li><code>sismember key member</code></li><li>随机获取集合中指定数量的数据</li><li><code>srandmember key [count]</code></li><li>随机获取集合中的某个数据并将该数据移除集合</li><li><code>spop key</code></li><li>求两个集合的交，并，差集</li><li><code>sinter key [key2]</code></li><li><code>sunion key1 [key2]</code></li><li><code>sdiff key1 [key2]</code></li><li>求两个集合的交，并，差集并存储到指定集合中</li><li><code>sinterstore destination key1 [key2]</code></li><li><code>sunionstore destination key1 [key2]</code></li><li><code>sdiffstore destination key1 [key2]</code></li><li>将指定数据从原始集合中移动到目标集合中</li><li><code>smove source destination member</code></li></ul><h2 id="set类型数据操作的注意事项" tabindex="-1">set类型数据操作的注意事项 <a class="header-anchor" href="#set类型数据操作的注意事项" aria-hidden="true">#</a></h2><ul><li>set类型不允许数据重复，如果添加的数据在set中已经存在，将只保留一份</li><li>set虽然与hash的存储结构相同，但是无法启动hash中存储值的空间</li></ul><h2 id="sorted-set" tabindex="-1">sorted_set <a class="header-anchor" href="#sorted-set" aria-hidden="true">#</a></h2><ul><li>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li>需要的储存结构：新的存储模型，可以保存可排序的数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><h2 id="sorted-set类型数据基本操作" tabindex="-1">sorted_set类型数据基本操作 <a class="header-anchor" href="#sorted-set类型数据基本操作" aria-hidden="true">#</a></h2><ul><li>添加数据</li><li><code>zadd key value member1 [score2 menber2]</code></li><li>获取全部数据</li><li><code>zrange key start stop [withscores]</code></li><li><code>zrevrange key start stop [withscores]</code></li><li>删除数据</li><li><code>zrem key member [member ...]</code></li><li>按条件获取数据</li><li><code>zrangebyscore key min max [withscores] [limit]</code></li><li><code>zrevrangebyscore key max min [withscores]</code></li><li>条件删除数据</li><li><code>zremrangebyrank key start stop</code></li><li><code>zremrangebyscore key min max</code></li><li>获取集合数据总量</li><li><code>zcard key</code></li><li><code>zcount key min max</code></li><li>集合交，并操作</li><li><code>zinterstore destination numkeys key [key ...]</code></li><li><code>zunionstore destination numkeys key [key ...]</code></li><li>获取数据对应的索引 排名</li><li><code>zrank key member</code></li><li><code>zrevrank key member</code></li><li>score值获取与修改</li><li><code>zscore key member</code></li><li><code>zincrby key increment member</code></li></ul><h2 id="注意的地方" tabindex="-1">注意的地方 <a class="header-anchor" href="#注意的地方" aria-hidden="true">#</a></h2><ol><li>min与max用于限定搜索查询的条件</li><li>start与stop用于限定查询范围，作为于索引，表示开始和结束索引</li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ol><h2 id="sorted-set类型数据操作注意事项" tabindex="-1">sorted_set类型数据操作注意事项 <a class="header-anchor" href="#sorted-set类型数据操作注意事项" aria-hidden="true">#</a></h2><ul><li>score保存的数据存储空间是64位，如果是整数范围是-9007199254740992 - 99007199254740992</li><li>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时慎重</li><li>sorted_set底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，score值将被反复覆盖，保留最后一次修改的结果</li></ul><h2 id="key通用操作" tabindex="-1">key通用操作 <a class="header-anchor" href="#key通用操作" aria-hidden="true">#</a></h2><h2 id="key的特征" tabindex="-1">key的特征 <a class="header-anchor" href="#key的特征" aria-hidden="true">#</a></h2><ul><li>key是一个字符串，通过key获取获取redis中保存的数据</li><li>对于key自身状态的相关操作，例如：有效期设定，判定是否有效，有效状态的切换等</li><li>对于key快速查询，例如：按指定策略查询key</li></ul><h2 id="key基本操作" tabindex="-1">key基本操作 <a class="header-anchor" href="#key基本操作" aria-hidden="true">#</a></h2><ul><li>删除指定key</li><li><code>del key</code></li><li>获取key是否存在</li><li><code>exists key</code></li><li>获取key的类型</li><li><code>type key</code></li></ul><h2 id="key扩展操作" tabindex="-1">key扩展操作 <a class="header-anchor" href="#key扩展操作" aria-hidden="true">#</a></h2><ul><li>为指定key设定有效期</li><li><code>expire key seconds</code></li><li><code>pexpire key milliseconds</code></li><li>获取key的有效期</li><li><code>ttl key</code></li><li><code>pttl key</code></li><li>时效性转为永久性</li><li><code>persist key</code></li></ul><h2 id="key查询操作" tabindex="-1">key查询操作 <a class="header-anchor" href="#key查询操作" aria-hidden="true">#</a></h2><ul><li>查询key</li><li><code>keys pattern</code><ul><li>查询模式规则</li><li>*匹配任意数量的任意符号</li><li>？配合一个任意符号</li><li>[] 匹配一个指定符号</li></ul></li></ul><h2 id="key其他操作" tabindex="-1">key其他操作 <a class="header-anchor" href="#key其他操作" aria-hidden="true">#</a></h2><ul><li>为key改名</li><li><code>rename key newkey</code></li><li>对所有key排序</li><li><code>sort</code></li><li>其他key通用操作</li><li><code>help @generic</code></li></ul><h2 id="数据库通用指令" tabindex="-1">数据库通用指令 <a class="header-anchor" href="#数据库通用指令" aria-hidden="true">#</a></h2><h2 id="key重复问题" tabindex="-1">key重复问题 <a class="header-anchor" href="#key重复问题" aria-hidden="true">#</a></h2><ul><li>key是由程序员定义的</li><li>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key</li><li>数据不区分种类，类别混杂在一起，极易出现重复或冲突</li></ul><h2 id="解决方案-1" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a></h2><ul><li>redis为每个服务提供有16个数据库，编号从0到15</li><li>每个数据库之间的数据互相独立</li></ul><h2 id="db基本操作" tabindex="-1">db基本操作 <a class="header-anchor" href="#db基本操作" aria-hidden="true">#</a></h2><ul><li>切换数据库</li><li><code>select index</code></li><li>其他操作</li><li><code>quit</code></li><li><code>ping</code></li><li><code>echo message</code></li></ul><h2 id="db数据清除" tabindex="-1">db数据清除 <a class="header-anchor" href="#db数据清除" aria-hidden="true">#</a></h2><ul><li>数据移动</li><li><code>move key db</code></li><li>数据清除</li><li><code>dbsize</code></li><li><code>flushdb</code></li><li><code>flushall</code></li></ul><h2 id="持久化过程保存什么" tabindex="-1">持久化过程保存什么 <a class="header-anchor" href="#持久化过程保存什么" aria-hidden="true">#</a></h2><ul><li>RDB 将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在于数据</li><li>AOF 将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</li></ul><h2 id="rdb" tabindex="-1">RDB <a class="header-anchor" href="#rdb" aria-hidden="true">#</a></h2><h2 id="rdb启动方式-——-save命令" tabindex="-1">RDB启动方式 —— save命令 <a class="header-anchor" href="#rdb启动方式-——-save命令" aria-hidden="true">#</a></h2><ul><li>命令</li><li><code>save</code></li><li>作用 手动执行一次操作，会在redis目录中生成一个点rdb文件,快照保存</li></ul><h2 id="rdb启动-save指令配置" tabindex="-1">RDB启动 save指令配置 <a class="header-anchor" href="#rdb启动-save指令配置" aria-hidden="true">#</a></h2><ul><li>dbfilename dump.rdb <ul><li>说明 设置本地数据库文件名，默认dump.rdb</li><li>经验 通常设置为dump 端口号.rdb</li></ul></li><li>dir <ul><li>说明：设置储存rdb文件的路径</li><li>经验：通常设置成存储空间比较大的目录，目录名称data</li></ul></li><li>rdbcompression yes <ul><li>说明：设置储存到本地是否压缩，LZF压缩</li><li>经验：通常默认开启，如果关闭，可以减少cpu运行时间，但储存文件变大</li></ul></li><li>rdbchecksum yes <ul><li>说明：是否进行对RDB文件格式经验，该校验过程在写和读文件过程进行</li><li>经验：默认开启，如果关闭，可以节省10%时间消耗，但数据可能有损坏风险</li></ul></li></ul><h2 id="杀掉进程" tabindex="-1">杀掉进程 <a class="header-anchor" href="#杀掉进程" aria-hidden="true">#</a></h2><p>ps -ef | grep redis- kill -s 9 进程号</p><h2 id="save-指令不建议使用-可能会导致阻塞" tabindex="-1">save 指令不建议使用，可能会导致阻塞 <a class="header-anchor" href="#save-指令不建议使用-可能会导致阻塞" aria-hidden="true">#</a></h2><h2 id="rdb启动方式-——-bgsave命令" tabindex="-1">RDB启动方式 —— bgsave命令 <a class="header-anchor" href="#rdb启动方式-——-bgsave命令" aria-hidden="true">#</a></h2><ul><li>命令</li><li>bgsave</li><li>作用</li><li>手动启动后台保存操作，但不是立即执行</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">127.0.0.1:6379&gt; bgsave</span></span>
<span class="line"><span style="color:#A6ACCD;">Background saving started</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>--- 图片丢失</p><p>注意：bgsave是使用fork函数生成子进程来完成任务的，save是马上执行</p><h2 id="bgsave相关配置" tabindex="-1">bgsave相关配置 <a class="header-anchor" href="#bgsave相关配置" aria-hidden="true">#</a></h2><ul><li>stop-writes-on-bgsave-error yes <ul><li>说明：后台储存过程中如果出现错误现象，是否停止保存操作</li><li>经验：默认是开启的</li></ul></li></ul><h2 id="rdb启动方式-——-save配置" tabindex="-1">RDB启动方式 —— save配置 <a class="header-anchor" href="#rdb启动方式-——-save配置" aria-hidden="true">#</a></h2><ul><li><p>配置</p></li><li><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">save second changes</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>作用</p><ul><li>满足限定时间范围内key的变化数量达到指定数量即进行持久化</li></ul></li><li><p>参数</p><ul><li>second 监控时间范围 单位minute</li><li>changes 监控key的变化数量</li></ul></li><li><p>设置文件</p><ul><li>conf文件夹中</li></ul></li><li><p>注意</p><ul><li>必须对数据产生影响</li><li>不进行数据对比</li><li>真正产生了影响</li><li>要根据实际业务进行设置，频度过高或过低会出现性能问题，结果是灾难性的</li><li>save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系</li><li>save配置启动后执行的是bgsave，不必担心阻塞问题</li></ul></li></ul><table><thead><tr><th>方式</th><th>save指令</th><th>bgsave指令</th><th>save配置</th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td><td></td></tr><tr><td>阻塞客户端指令</td><td>是</td><td>否</td><td></td></tr><tr><td>额外内存消耗</td><td>否</td><td>是</td><td></td></tr><tr><td>启动新进程</td><td>否</td><td>是</td><td></td></tr></tbody></table><p>RDB优点</p><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常合适用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复</li></ul><p>RDB缺点</p><ul><li>RDB方式无论是执行指令还是利用配置，无法实时持久化，会有丢失数据的可能</li><li>bgsave指令每次都需要执行fork操作创建子进程，要牺牲一些性能</li><li>redis版本不同，生成出来的RDB文件无法使用，不兼容</li></ul><h2 id="aof" tabindex="-1">AOF <a class="header-anchor" href="#aof" aria-hidden="true">#</a></h2><h2 id="rdb存储的弊端" tabindex="-1">RDB存储的弊端 <a class="header-anchor" href="#rdb存储的弊端" aria-hidden="true">#</a></h2><ul><li>存储数据较大，效率低 <ul><li>基于快照思想，每次读取都是全部数据</li></ul></li><li>大数据量下IO性能较低</li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机到来的数据丢失风险</li></ul><h2 id="解决思路" tabindex="-1">解决思路 <a class="header-anchor" href="#解决思路" aria-hidden="true">#</a></h2><ul><li>不写全数据，仅记录部分数据</li><li>改记录数据为记录操作过程</li><li>对所有操作均进行记录，排除丢失数据的风险</li></ul><h2 id="aof概念" tabindex="-1">AOF概念 <a class="header-anchor" href="#aof概念" aria-hidden="true">#</a></h2><ul><li>append only file 持久化 以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的，与RDB相比可以简单描述为改数据为记录数据产生的过程</li><li>AOF的主要作用是解决了数据持久化的实时性，目前已经是Reids持久化的主流方式</li></ul><h2 id="aof写数据过程" tabindex="-1">AOF写数据过程 <a class="header-anchor" href="#aof写数据过程" aria-hidden="true">#</a></h2><p>--- 图片丢失</p><h2 id="aof写数据三种策略" tabindex="-1">AOF写数据三种策略 <a class="header-anchor" href="#aof写数据三种策略" aria-hidden="true">#</a></h2><ul><li>always 每次 <ul><li>每次写入操作均同步到AOF文件中，数据零误差，性能较低</li></ul></li><li>everysec 每秒 <ul><li>每秒将缓冲区中的指令同步都AOF文件中，准确性较高，性能较高</li><li>在系统突然宕机的情况下丢失1秒内数据，<strong>（建议使用）也是默认配置</strong></li></ul></li><li>no 系统控制 <ul><li>由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li></ul></li></ul><h2 id="aof功能开启" tabindex="-1">AOF功能开启 <a class="header-anchor" href="#aof功能开启" aria-hidden="true">#</a></h2><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">appendonly yes|no</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-hidden="true">#</a></h2><p>是否开启AOF持久化功能，默认为不开启状态</p><h2 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">appendfsync always|everysec|no</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-hidden="true">#</a></h2><p>AOF写数据策略</p><h2 id="配置-2" tabindex="-1">配置 <a class="header-anchor" href="#配置-2" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">appendfilename filename</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="作用-2" tabindex="-1">作用 <a class="header-anchor" href="#作用-2" aria-hidden="true">#</a></h2><p>AOF持久化文件名，默认文件名为appendonly.aof</p><h2 id="配置-3" tabindex="-1">配置 <a class="header-anchor" href="#配置-3" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">dir</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="作用-3" tabindex="-1">作用 <a class="header-anchor" href="#作用-3" aria-hidden="true">#</a></h2><p>AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p><h2 id="aof会遇到的问题" tabindex="-1">AOF会遇到的问题 <a class="header-anchor" href="#aof会遇到的问题" aria-hidden="true">#</a></h2><p>比如多个set，只恢复最后一个</p><h2 id="aof重写" tabindex="-1">AOF重写 <a class="header-anchor" href="#aof重写" aria-hidden="true">#</a></h2><p>简单说就是将对同一个数据的若干条命令执行结果转化成最终结果数据对应的指令进行记录，也解决了压缩文件的体积</p><h2 id="aof重写作用" tabindex="-1">AOF重写作用 <a class="header-anchor" href="#aof重写作用" aria-hidden="true">#</a></h2><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><h2 id="aof重写规则" tabindex="-1">AOF重写规则 <a class="header-anchor" href="#aof重写规则" aria-hidden="true">#</a></h2><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令 <ul><li>如del key1 hdel key2 srem key3 set key4 111等等</li></ul></li><li>对同一数据的多条写命令合并为一条命令 <ul><li>如lpush list1 a、lpush list1 b、等等可转为lpush list a b</li><li>为防止数据量过大造成客户端缓冲区溢出，对list、set，hash、zset 等类型，每条指令最多写入64个元素</li></ul></li></ul><h2 id="aof重写方式" tabindex="-1">AOF重写方式 <a class="header-anchor" href="#aof重写方式" aria-hidden="true">#</a></h2><ul><li><p>手动重写</p></li><li><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">bgrewriteaof</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>自动重写</p></li><li><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">auto-aof-rewrite-min-size  size</span></span>
<span class="line"><span style="color:#A6ACCD;">auto-aof-rewrite-percentage percentage</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ul>`,168),t=[n];function o(p,r,c,d,h,C){return s(),e("div",null,t)}const A=l(i,[["render",o]]);export{u as __pageData,A as default};
