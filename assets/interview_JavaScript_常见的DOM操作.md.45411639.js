import{_ as e,o as l,c as s,a}from"./app.101aacdd.js";const F=JSON.parse('{"title":"常见的DOM操作","description":"","frontmatter":{"title":"常见的DOM操作","tags":["JavaScript"]},"headers":[{"level":2,"title":"常见的DOM操作","slug":"常见的dom操作","link":"#常见的dom操作","children":[{"level":3,"title":"获取节点","slug":"获取节点","link":"#获取节点","children":[]},{"level":3,"title":"生成节点","slug":"生成节点","link":"#生成节点","children":[]},{"level":3,"title":"修改节点","slug":"修改节点","link":"#修改节点","children":[]},{"level":3,"title":"删除节点","slug":"删除节点","link":"#删除节点","children":[]}]}],"relativePath":"interview/JavaScript/常见的DOM操作.md"}'),n={name:"interview/JavaScript/常见的DOM操作.md"},o=a(`<h2 id="常见的dom操作" tabindex="-1">常见的DOM操作 <a class="header-anchor" href="#常见的dom操作" aria-hidden="true">#</a></h2><h3 id="获取节点" tabindex="-1">获取节点 <a class="header-anchor" href="#获取节点" aria-hidden="true">#</a></h3><ul><li>getElementById // 根据id查询元素，返回对应的元素</li><li>getElementsByTagName // 根据标签名查询元素，返回的是一个<code>HTML</code>集合，伪数组</li><li>getElementsByClassName // 根据类名查询元素，返回的是一个<code>HTML</code>集合，伪数组</li><li>querySelectorAll // 根据css选择器查询元素，返回的是一个<code>HTML</code>集合，伪数组</li></ul><h3 id="生成节点" tabindex="-1">生成节点 <a class="header-anchor" href="#生成节点" aria-hidden="true">#</a></h3><ul><li>createElement // 根据传入的标签名称，创建的元素并返回</li></ul><blockquote><p>新增后并不会立即插入到文档中，而是需要使appendChild追加到指定的位置</p></blockquote><h3 id="修改节点" tabindex="-1">修改节点 <a class="header-anchor" href="#修改节点" aria-hidden="true">#</a></h3><ul><li>insertBefore 在某个位置插入一个新元素 <ul><li><code>parentNode.insertBefore(newNode, referenceNode);</code></li></ul></li><li>appendChild 插入一个新的元素在目标元素列表中的尾部 <ul><li><code>element.appendChild(aChild)</code></li></ul></li></ul><h3 id="删除节点" tabindex="-1">删除节点 <a class="header-anchor" href="#删除节点" aria-hidden="true">#</a></h3><ul><li>el.removeChild 删除父级元素下的某个子元素</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">removeElement</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentEl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">parentEl</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">parentEl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>删除元素需要先通过<code>parent</code>元素，再删除对应的子元素，无法自身删除</p></blockquote>`,12),t=[o];function p(c,r,i,d,h,y){return l(),s("div",null,t)}const u=e(n,[["render",p]]);export{F as __pageData,u as default};
