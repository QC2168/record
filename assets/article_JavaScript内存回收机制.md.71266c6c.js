import{_ as s,o as a,c as n,a as l}from"./app.2d0f0e7d.js";const C=JSON.parse('{"title":"JS进阶-内存回收机制（GC）","description":"","frontmatter":{"title":"JS进阶-内存回收机制（GC）","tags":["JavaScript"]},"headers":[{"level":2,"title":"JavaScript 内存回收机制","slug":"javascript-内存回收机制","link":"#javascript-内存回收机制","children":[]},{"level":2,"title":"什么是内存回收机制","slug":"什么是内存回收机制","link":"#什么是内存回收机制","children":[]},{"level":2,"title":"垃圾回收策略","slug":"垃圾回收策略","link":"#垃圾回收策略","children":[]},{"level":2,"title":"标记清理","slug":"标记清理","link":"#标记清理","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"引用计数 reference counting","slug":"引用计数-reference-counting","link":"#引用计数-reference-counting","children":[]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[]},{"level":2,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[]},{"level":2,"title":"let const 提升性能","slug":"let-const-提升性能","link":"#let-const-提升性能","children":[]},{"level":2,"title":"V8 隐藏类","slug":"v8-隐藏类","link":"#v8-隐藏类","children":[]},{"level":2,"title":"内存泄露","slug":"内存泄露","link":"#内存泄露","children":[]},{"level":2,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[]},{"level":2,"title":"定时器","slug":"定时器","link":"#定时器","children":[]},{"level":2,"title":"事件监听","slug":"事件监听","link":"#事件监听","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"FinalizationRegistry","slug":"finalizationregistry","link":"#finalizationregistry","children":[]},{"level":2,"title":"什么情况下会导致内存泄露","slug":"什么情况下会导致内存泄露","link":"#什么情况下会导致内存泄露","children":[]}],"relativePath":"article/JavaScript内存回收机制.md"}'),e={name:"article/JavaScript内存回收机制.md"},o=l(`<h2 id="javascript-内存回收机制" tabindex="-1">JavaScript 内存回收机制 <a class="header-anchor" href="#javascript-内存回收机制" aria-hidden="true">#</a></h2><h2 id="什么是内存回收机制" tabindex="-1">什么是内存回收机制 <a class="header-anchor" href="#什么是内存回收机制" aria-hidden="true">#</a></h2><p>垃圾回收又称为<code>GC</code>（<code>Garbage Collection</code>）是指一种自动内存管理机制，在<code>JavaScript</code>中当我们声明一个变量时会在内存中开辟一块内存空间用于存放这个变量，当这个变量被使用过后，你可能再也不需要他了，此时你可以将他标记为<code>NULL</code>（此时它就被称为垃圾可以被处理掉），它将会被<code>JavaScript</code>引擎自动回收。从而释放内存空间。</p><p><code>JavaScript</code>通常情况下是不需要手动来管理的，它们都会自动帮助我们管理内存，同样有自动管理内存的语言还有<code>java</code>、<code>python</code>、<code>swift</code>、<code>dart</code>等</p><p>手动管理的编程语言（<code>C</code>、<code>C++</code>，早期<code>OC</code>等），这些语言需要开发者手动的进行内存管理。</p><h2 id="垃圾回收策略" tabindex="-1">垃圾回收策略 <a class="header-anchor" href="#垃圾回收策略" aria-hidden="true">#</a></h2><p>垃圾回收策略主要有标记清理、引用计数</p><h2 id="标记清理" tabindex="-1">标记清理 <a class="header-anchor" href="#标记清理" aria-hidden="true">#</a></h2><p>标记清理法 <code>mark-and-sweep</code>，是<code>JavaScript</code>最常用的垃圾回收策略。目前市面上大多数浏览器的JS引擎都是使用标记清理法</p><blockquote><p>不同的浏览器还对此算法进行额外的加工优化算法。在回收的频率上也会有所差异</p></blockquote><p>给变量标记的方法有很多种，例如在变量进入上下文时，我们将变量推入到一个列表中在，这里存放着在上下文的变量。而另外一个表存放不在上下文中的变量</p><p>当我们使用<code>JavaScript</code>当一个作用域中定义一个变量时，这个变量将会被JS引擎在当前上文中进行标记，在正常情况下这个时候变量是不可能被回收的，因为可能在某些时候我们还需要用到它。当变量离开作用域时，也会被添加上离开上下文的标记。</p><p>在标记法的整个执行过程大概过程是</p><ul><li>垃圾收集器会给内存中的所有变量做一个标记</li><li>当变量离开上下文时，会在做一次标记，代表这个变量可销毁</li><li>清理所有可销毁的变量，释放内存空间，之后就是等待下一轮回收</li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h2><p>标记清理法也有个缺点，当每一轮清理完变量之后，会出现大量不连续的内存碎片，当空间碎片太多时可能会导致程序在运行过程中需要较大内存空间对象时，无法找到足够的连续内存而不得不再提前触发一次垃圾回收动作。</p><h2 id="引用计数-reference-counting" tabindex="-1">引用计数 <code>reference counting</code> <a class="header-anchor" href="#引用计数-reference-counting" aria-hidden="true">#</a></h2><p>引用计数也是一种垃圾回收策略，但是没有那么常用。</p><p>它主要是做法是将每一个变量值都记录它的引用次数，这样子说您可能不太明白，我们举个例子。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 声明一个变量</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明一个bar的对象，此时bar.count引用了foo变量，foo计数+1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 反之，我们把bar.count的值覆盖掉的话，foo的计数-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>引用计数最初是被<code>Netscape3.0</code>浏览器所采用，但很快就遇到了严重的问题：循环引用。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    other </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    other </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在上面这个例子中，<code>obj1</code>和<code>obj2</code>都是互相引用的状态，它们是计数都是2，在引用计数策略情况下，在上下文执行之后，这两个对象并不会被销毁（计数永远不会变成0）。所以在<code>Netscape4.0</code>时，就采用了标记清理策略。</p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-hidden="true">#</a></h2><p>在<code>IE8</code>之前，<code>BOM</code>和<code>DOM</code>中的对象是<code>C++</code>实现的组件对象模型（<code>COM</code>即<code>Component Object Model</code>）对象，而<code>COM</code>对象使用引用计数实现垃圾回收。即使IE的JS引擎使用了标记清理策略，但存取的<code>COM</code>对象仍然是引用计数策略。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some_element</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myObject</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> element</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myObject</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>这里引用了JavaScript高级程序设计（第四版）P96的例子</p></blockquote><p>从上面这个例子可以看出，myObject.element和element.someObject造成了循环引用。所以DOM将永远不会被回收，即使在页面上已经消失了。</p><p>或者，你可以先上面的例子一样，清除循环引用</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">myObject</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><p>为了修复这个问题，在<code>IE9</code>之后<code>BOM</code>和<code>DOM</code>对象都被改成了<code>JavaScript</code>对象，避免了使用两种不同的垃圾回收算法导致出现问题。</p><h2 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-hidden="true">#</a></h2><p>在使用<code>JavaScript</code>这种自动垃圾回收处理的编程语言环境中，可以大大降低开发者的心智负担，无需去关心内存管理。</p><p>通常情况下，分配给浏览器的内存要比我们使用的桌面软件要少得很多，这是因为出于安全考虑而不是别的，这个内存限制也会影响到变量分配，语句执行，调用栈的，也避免大量的<code>JavaScript</code>代码使得甚至耗尽系统中的内存导致操作系统崩溃。</p><p>内存的占用量保持在一个较小值可以使页面的性能更好，这也是优化内存占用的最佳手段，即只保存必要的数据，其他数据将被<code>GC</code>回收。</p><h2 id="let-const-提升性能" tabindex="-1">let const 提升性能 <a class="header-anchor" href="#let-const-提升性能" aria-hidden="true">#</a></h2><p>在ES6中，新增了let和const关键字用来声明变量常量，这两个关键字在改善代码风格时，也改进了垃圾回收的过程。因为let和const都是以块级作为作用域的，所以比起var的话，如果块级作用域比函数作用域更早终止的情况下，那么let和const会被更早地被垃圾回收，释放内存。</p><h2 id="v8-隐藏类" tabindex="-1">V8 隐藏类 <a class="header-anchor" href="#v8-隐藏类" aria-hidden="true">#</a></h2><p>不同的浏览器使用的<code>JavaScript</code>引擎会采用不同的性能优化策略，在日常开发中大家最常用的<code>chrome</code>浏览器是使用的V8引擎的，在V8引擎将我们的<code>JavaScript</code>代码编程时机器码时会利用一种 “隐藏类”的操作，会让你的代码性能更好。</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> _island </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> zhangsan </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>我们看上面这个例子，在运行期间V8会将这两个实例共享相同的隐藏类，因为它们使用的是同一个<code>constructor</code>和原型。</p><p>下面，我们再拿上面的代码稍微改动下，看看什么情况下是不同的隐藏类。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> _island </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> zhangsan </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加一个新的属性age</span></span>
<span class="line"><span style="color:#A6ACCD;">_island</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>在这例子，我们给<code>_island</code>添加一个新的属性<code>age</code>，此时这两个<code>Perso</code>n实例使用的就不是同一个隐藏类了，这将对性能有所影响。</p><p>如果再补充一句<code>delete _island.age</code>，在这句代码之后，它们还是共享同一个隐藏类</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> _island</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span></span>
<span class="line"></span></code></pre></div><h2 id="内存泄露" tabindex="-1">内存泄露 <a class="header-anchor" href="#内存泄露" aria-hidden="true">#</a></h2><p>内存泄漏（<code>Memory Leak</code>）是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><h2 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的例子在声明了全局变量但却没有去使用它。由于<code>bar</code>没有使用<code>var</code>或者是<code>let</code>、<code>const</code>关键字去定义，此时<code>JavaScript</code>引擎会把<code>bar</code>添加到<code>window</code>上面的，当函数执行结束之后<code>bar</code>并不会被销毁，这就造成了内存泄漏。也是常见也最容易修复的内存泄漏问题。</p><p>解决的方法也很简单，只需要上<code>bar</code>前面添加上<code>var</code> / <code>let</code> / <code>const</code>关键字即可。</p><h2 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-hidden="true">#</a></h2><p>定时器也可能会导致内存泄漏的出现，例如下面的例子，定时器中引用了一个外部的变量，只要定时器一直运行，那么这个变量将不会被垃圾回收。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="事件监听" tabindex="-1">事件监听 <a class="header-anchor" href="#事件监听" aria-hidden="true">#</a></h2><p><code>EventTarget.addEventListener</code>也会造成内存泄漏的问题。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divDom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">divDom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">+=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>上面的例子中，我们通过<code>addEventListener</code>给<code>divDom</code>添加了一个事件，直接在<code>addEventListener</code>第二个参数直接传入一个匿名函数，这样子的话，好处是占用的存储空间更小了。但是由于没有保持函数的引用会导致无需无法调用<code>removeEventListener</code>，<code>addEventListener</code>也会一直保留在内存中无法回收而导致内存泄漏问题。</p><p>我们改善下上面的例子，把上面的匿名函数抽离出来成<code>increase</code>函数</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divDom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increase</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 一些要做的事情</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">divDom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">increase)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 销毁事件</span></span>
<span class="line"><span style="color:#A6ACCD;">divDom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">increase)</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如果你没有移除事件，而是直接<code>parent.removeChild</code>，此时在<code>DomTree</code>上是没有这个元素的，但<code>clickHandler</code>也驻留在内存中。</p></blockquote><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h2><p>闭包是指有权访问另外一个函数作用域中的变量的函数，它的应用场景有很多例如我们常用的工具函数防抖、节流、<code>react hook</code>等等。</p><p>闭包很容易在不知不觉的造成内存泄漏，从下面的例子中，<code>name</code>的内存会被泄露，因为<code>foo</code>函数返回的是一个函数，闭包一直在引用它，导致无法被垃圾回收。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="finalizationregistry" tabindex="-1">FinalizationRegistry <a class="header-anchor" href="#finalizationregistry" aria-hidden="true">#</a></h2><blockquote><p><code>FinalizationRegistry</code> 是 ES2021引入的新对象</p></blockquote><p><code>FinalizationRegistry</code>对象可以让你在对象被垃圾回收时请求一个回调</p><p>我们直接看下面这个例子，我们创建了一个<code>registry</code>对象，<code>FinalizationRegistry</code>接收一个函数，当执行垃圾回收时会触发执行这个函数。</p><p>接下来，我们把<code>foo</code>对象通过<code>registry.register</code>注册了<code>foo</code>，并传入了&#39;<code>foo</code>被销毁了&#39;，这是刚刚定义的函数形参<code>heldValue</code>。</p><p>最后，我们把<code>foo</code>指<code>向null</code>，在下一次GC后foo将会被销毁。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> registry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FinalizationRegistry</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">heldValue</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">heldValue</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// foo被销毁了</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(foo</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo被销毁了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span></code></pre></div><h2 id="什么情况下会导致内存泄露" tabindex="-1">什么情况下会导致内存泄露 <a class="header-anchor" href="#什么情况下会导致内存泄露" aria-hidden="true">#</a></h2><blockquote><p>2023/2/8</p></blockquote><ul><li>遗留的全局变量 <ul><li>在全局中创建了一个全局变量，在使用完之后未将它设定为<code>null</code>，导致无法被回收</li></ul></li><li>计时器 <ul><li>在业务中使用了<code>setInterval</code>定时器，但使用完未使用<code>clearInterval</code>导致没有被回收</li></ul></li><li><code>DOM</code>引用 <ul><li>获取<code>DOM</code>元素后，当<code>DOM</code>被删除，由于之前将<code>DOM</code>赋值在一个变量上，导致无法回收</li></ul></li><li>闭包 <ul><li>不正确的使用闭包很容易造成内存泄露</li><li><a href="https://www.zhihu.com/question/31078912" target="_blank" rel="noreferrer">关于js闭包是否真的会造成内存泄漏？</a></li></ul></li></ul>`,76),p=[o];function c(t,r,i,D,y,d){return a(),n("div",null,p)}const A=s(e,[["render",c]]);export{C as __pageData,A as default};
