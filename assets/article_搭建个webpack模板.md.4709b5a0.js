import{_ as s,c as n,o as a,a as l}from"./app.80f5f127.js";const A=JSON.parse('{"title":"搭建个webpack模板","description":"","frontmatter":{"title":"搭建个webpack模板","tags":["JavaScript","webpack"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"什么是webpack","slug":"什么是webpack","link":"#什么是webpack","children":[]},{"level":2,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":2,"title":"配置快捷脚本","slug":"配置快捷脚本","link":"#配置快捷脚本","children":[]},{"level":2,"title":"项目目录结构","slug":"项目目录结构","link":"#项目目录结构","children":[]},{"level":2,"title":"创建项目配置文件","slug":"创建项目配置文件","link":"#创建项目配置文件","children":[]},{"level":2,"title":"编写config文件","slug":"编写config文件","link":"#编写config文件","children":[]},{"level":2,"title":"配置loader","slug":"配置loader","link":"#配置loader","children":[]},{"level":2,"title":"配置plugins","slug":"配置plugins","link":"#配置plugins","children":[]},{"level":2,"title":"配置多页面","slug":"配置多页面","link":"#配置多页面","children":[]},{"level":2,"title":"配置代码规范","slug":"配置代码规范","link":"#配置代码规范","children":[]},{"level":2,"title":"EditorConfig","slug":"editorconfig","link":"#editorconfig","children":[]},{"level":2,"title":"ESlint","slug":"eslint","link":"#eslint","children":[]},{"level":2,"title":"husky","slug":"husky","link":"#husky","children":[]},{"level":2,"title":"lint-staged","slug":"lint-staged","link":"#lint-staged","children":[]},{"level":2,"title":"调试环境","slug":"调试环境","link":"#调试环境","children":[]},{"level":2,"title":"安装webpack-dev-server插件","slug":"安装webpack-dev-server插件","link":"#安装webpack-dev-server插件","children":[]},{"level":2,"title":"配置插件","slug":"配置插件","link":"#配置插件","children":[]},{"level":2,"title":"网络请求","slug":"网络请求","link":"#网络请求","children":[]},{"level":2,"title":"安装axios","slug":"安装axios","link":"#安装axios","children":[]},{"level":2,"title":"直接请求 （ 不推荐 ）","slug":"直接请求-不推荐","link":"#直接请求-不推荐","children":[]},{"level":2,"title":"配置全局网络请求实例","slug":"配置全局网络请求实例","link":"#配置全局网络请求实例","children":[]},{"level":2,"title":"API集中管理","slug":"api集中管理","link":"#api集中管理","children":[]},{"level":2,"title":"使用API","slug":"使用api","link":"#使用api","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"relativePath":"article/搭建个webpack模板.md"}'),p={name:"article/搭建个webpack模板.md"},o=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>最近在看<code>vue</code>源码解析的教程视频，每一章讲解都使用到了<code>webpack</code>，我们就要从零开始搭建脚手架，这样子太费时间了，本文将简述如何去搭建一个<code>webpack</code>模板，也是方便我们后续开发或者练习时使用。（即是即拉即用，无需每次使用都去配置一遍）。</p><h2 id="什么是webpack" tabindex="-1">什么是webpack <a class="header-anchor" href="#什么是webpack" aria-hidden="true">#</a></h2><p><code>webpack</code>是目前前端开发中最火的模块打包工具，只需要通过简单的配置，便可以完成模块的加载和打包。</p><p>我们就可以从官网中的主图看出<code>webpack</code>它可以将多种文件打包合并成一个或多个<code>bundle</code>。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654712.png" alt="image-20210620160811018"></p><h2 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> 	</span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">初始化项目</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;">    	</span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">初始化git仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--init</span><span style="color:#A6ACCD;">  	</span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">生成</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsconfig.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">配置文件</span></span>
<span class="line"></span></code></pre></div><p>在项目中安装<code>webpack</code>及<code>webpack-cli</code> （本地安装）。</p><blockquote><p>如果使用全局安装，这会将你项目中的 <code>webpack</code> 锁定到指定版本，并且在使用不同的 <code>webpack</code> 版本的项目中， 可能会导致构建失败。</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"></span></code></pre></div><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654713.png" alt=""></p><h2 id="配置快捷脚本" tabindex="-1">配置快捷脚本 <a class="header-anchor" href="#配置快捷脚本" aria-hidden="true">#</a></h2><p>在项目的<code>package.json</code>文件中的scripts对象中添加一句<code>&quot;build&quot;: &quot;webpack&quot;</code>，稍后我们可以使用<code>npm run build</code>来把项目跑起来。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span></code></pre></div><h2 id="项目目录结构" tabindex="-1">项目目录结构 <a class="header-anchor" href="#项目目录结构" aria-hidden="true">#</a></h2><p>我们在根目录下创建一个<code>src</code>，作为项目的根目录。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">template      </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ src      </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json  </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ tsconfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json       </span></span>
<span class="line"></span></code></pre></div><p>之后，我们在<code>src</code>目录中新建一个<code>pages</code>文件夹用来放置项目页面的文件夹，在<code>pages</code>文件夹中创建<code>index</code>文件夹及<code>html</code>，<code>scss</code>，<code>ts</code>文件，在<code>src</code>目录下创建一个<code>main.ts</code>，并在<code>main.ts</code>中写入。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 在index.ts中引入index.scss</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index.scss</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">template        </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ src                  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ pages             </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │  └─ index          </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">html  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     ├─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scss  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     └─ index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts    </span></span>
<span class="line"><span style="color:#A6ACCD;">│  └─ main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts           </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json    </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json    </span></span>
<span class="line"><span style="color:#A6ACCD;">└─ tsconfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json    </span></span>
<span class="line"></span></code></pre></div><h2 id="创建项目配置文件" tabindex="-1">创建项目配置文件 <a class="header-anchor" href="#创建项目配置文件" aria-hidden="true">#</a></h2><p>在根目录下创建一个<code>webpack.config.ts</code>文件，<code>webpack</code>会根据该配置文件定义的属性进行处理。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">webpack-template      </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ src                </span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ pages             </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │  └─ index          </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     ├─ index.html  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     ├─ index.scss  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │     └─ index.ts    </span></span>
<span class="line"><span style="color:#A6ACCD;">│  └─ main.ts          </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ package-lock.json  </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ package.json       </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ tsconfig.json      </span></span>
<span class="line"><span style="color:#A6ACCD;">└─ webpack.config.ts  </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="编写config文件" tabindex="-1">编写config文件 <a class="header-anchor" href="#编写config文件" aria-hidden="true">#</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> webpack </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">webpack</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Configuration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/main.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[name].js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">clean</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在项目中执行安装命令，安装所需要用到的<code>loader</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev css-loader style-loader sass-loader sass ts-loader typescript ts-node @types/node @types/webpack html-webpack-plugin</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在<code>webpack.config.ts</code>中配置安装好的<code>loader</code>和<code>plugins</code>。</p><h2 id="配置loader" tabindex="-1">配置loader <a class="header-anchor" href="#配置loader" aria-hidden="true">#</a></h2><p><code>loader</code>的一些相关配置。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">s</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">ac</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">ss</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 将 JS 字符串生成为 style 节点</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 将 CSS 转化成 CommonJS 模块</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 将 Sass 编译成 CSS</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sass-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">png</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">svg</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">jpg</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">jpeg</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">gif</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">asset/resource</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">woff</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">woff2</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">eot</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">ttf</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">otf</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">asset/resource</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="配置plugins" tabindex="-1">配置plugins <a class="header-anchor" href="#配置plugins" aria-hidden="true">#</a></h2><p><code>plugins</code>的一些相关配置。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HtmlWebpackPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/pages/index/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"></span></code></pre></div><p>安装后，执行<code>npm run script</code>，把项目打包起来，得到<code>dist</code>文件夹，里边即是我们项目中<code>src</code>文件夹打包好的文件。</p><p>可以看到里边有index.html和main.js文件，由于我们写的是<code>ts</code>文件，无法直接在浏览器中跑起来，上面我们配置了<code>ts-loader</code>，是它帮我们把<code>ts</code>转换为<code>js</code>文件的。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654714.png" alt="3"></p><h2 id="配置多页面" tabindex="-1">配置多页面 <a class="header-anchor" href="#配置多页面" aria-hidden="true">#</a></h2><p>为什么这里要配置多页面？</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161658799.jpg" alt="问号表情包"></p><p>现在<code>Vue</code>，<code>React</code>，<code>Angular</code>这三大框架都是<code>SPA</code>了，开局直接<code>npm run serve</code></p><p>但在很多场景下，SPA开发模式可能不太适用，比如我们学校有时候举办活动页面，或者平时写一些简单的页面，这个时候其实多页面更合适些。</p><p>因为很多时候这些页面都是完全不相关的，它们之间无需共享数据，你甚至可以对每个单独的页面使用不同的技术栈，例如页面A使用<code>Vue</code>，页面B使用<code>React</code>，页面C使用<code>Angular</code>，可以单独对页面设定框架的引入。</p><p>接下来，我们将把我们的<code>webpack-template</code>进行多页面的配置。</p><p>将项目中的<code>src / pages</code>文件夹中新建<code>hello</code>文件夹，和<code>index</code>一样放<code>html</code>，<code>scss</code>，<code>ts</code>文件，<strong>这是第二个页面</strong>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">src                  </span></span>
<span class="line"><span style="color:#A6ACCD;">├─ pages             </span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ hello          </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │  ├─ hello.html  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │  ├─ hello.scss  </span></span>
<span class="line"><span style="color:#A6ACCD;">│  │  └─ hello.ts    </span></span>
<span class="line"><span style="color:#A6ACCD;">│  └─ index          </span></span>
<span class="line"><span style="color:#A6ACCD;">│     ├─ index.html  </span></span>
<span class="line"><span style="color:#A6ACCD;">│     ├─ index.scss  </span></span>
<span class="line"><span style="color:#A6ACCD;">│     └─ index.ts    </span></span>
<span class="line"><span style="color:#A6ACCD;">└─ main.ts           </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">// hello.html</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        hello.html</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// hello.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./hello.scss</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在<code>webpack.config.ts</code>配置文件中把<code>entry</code>和<code>output</code>属性修改成：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">entry: {</span></span>
<span class="line"><span style="color:#A6ACCD;">        main:&#39;./src/main.ts&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        &#39;index&#39;: &#39;./src/pages/index/index.ts&#39;, // index页面</span></span>
<span class="line"><span style="color:#A6ACCD;">        &#39;hello&#39;: &#39;./src/pages/hello/hello.ts&#39;, // hello页面</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    output: {</span></span>
<span class="line"><span style="color:#A6ACCD;">        path: path.resolve(__dirname, &#39;dist&#39;),</span></span>
<span class="line"><span style="color:#A6ACCD;">        filename: &#39;js/[name]/[name].js&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        clean: true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>因为多个页面对应的页面内容也是不同的，我们需要在<code>plugins</code>数组上配置多个<code>HtmlWebpackPlugin</code>。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>title</td><td>页面标题，即<code>document.title</code></td></tr><tr><td>filename</td><td>导出页面文件的名称</td></tr><tr><td>template</td><td>页面的模板，指向<code>pages</code>下对应页面的<code>html</code>文件</td></tr><tr><td>chunks</td><td>注入的脚本文件（ 一定要配置这个！！否则全部脚本文件会被注入到当前页面中 ）</td></tr></tbody></table><p>关于<code>HtmlWebpackPlugin</code>插件的更多配置请阅读： <a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noreferrer">https://github.com/jantimon/html-webpack-plugin</a></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HtmlWebpackPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/pages/index/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HtmlWebpackPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/pages/hello/hello.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span></code></pre></div><p>现在我们再执行一下<code>npm run build</code>命令，打包我们的项目。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654715.png" alt="4"></p><p>打开<code>hello.html</code>和<code>hello.html</code>，我们在<code>pages</code>文件夹中对应的页面文件也都被<code>HtmlWebpackPlugin</code>插件处理到对应的<code>html</code>文件中。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654716.png" alt="5"></p><h2 id="配置代码规范" tabindex="-1">配置代码规范 <a class="header-anchor" href="#配置代码规范" aria-hidden="true">#</a></h2><p>具备基本工程素养的同学都会注重编码规范，而代码风格检查（Code Linting，简称 Lint）是保障代码规范一致性的重要手段，</p><h2 id="editorconfig" tabindex="-1">EditorConfig <a class="header-anchor" href="#editorconfig" aria-hidden="true">#</a></h2><p><code>EditorConfig</code>是用来配置格式化代码的，这个格式化代码一定要和<code>ESlint</code>中的配置相符，否则会出现格式化后的代码不符合<code>ESlint</code>中的规则，从而不能正常的打包项目。</p><p>在项目根目录添加<code>.editorconfig</code>文件，<code>.editorconfig</code>文件是定义一些格式化规则，目录树结构这里就不放啦，太长啦！</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># Editor configuration, see http:</span><span style="color:#676E95;font-style:italic;">//editorconfig.org</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># 表示是最顶层的 EditorConfig 配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">root = </span><span style="color:#89DDFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> # 表示所有文件适用</span></span>
<span class="line"><span style="color:#A6ACCD;">charset = utf</span><span style="color:#F78C6C;">-8</span><span style="color:#A6ACCD;"> # 设置文件字符集为 utf</span><span style="color:#F78C6C;">-8</span></span>
<span class="line"><span style="color:#A6ACCD;">indent_style = space # 缩进风格（tab | space）</span></span>
<span class="line"><span style="color:#A6ACCD;">indent_size = </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> # 缩进大小</span></span>
<span class="line"><span style="color:#A6ACCD;">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="color:#A6ACCD;">trim_trailing_whitespace = </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> # 去除行首的任意空白字符</span></span>
<span class="line"><span style="color:#A6ACCD;">insert_final_newline = </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> # 始终在文件末尾插入一个新行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">*.md</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> # 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span style="color:#A6ACCD;">max_line_length = off</span></span>
<span class="line"><span style="color:#A6ACCD;">trim_trailing_whitespace = </span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span></code></pre></div><p>提示：如果你是使用<code>vscode</code>编辑器，需要到插件市场中安装 <code>EditorConfig for VS Code</code> 插件。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654717.png" alt="6"></p><h2 id="eslint" tabindex="-1">ESlint <a class="header-anchor" href="#eslint" aria-hidden="true">#</a></h2><p><code>ESlint</code>是一款开源的代码检查工具，找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。</p><p>团队开发中，团队成员之间的编码风格和习惯是不同的，我们可以使用<code>ESlint</code>来解决这个问题，当代码风格不符合<code>ESlint</code>规则时，就会给出代码规则提示并自动修复。让项目的编码风格统一。</p><p>安装<code>ESlint</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">eslint-webpack-plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">eslint</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"></span></code></pre></div><p>配置<code>ESlint</code></p><p>在项目根目录中打开终端，执行<code>npm eslint --init</code>，然后根据终端操作提示完成一系列设置来生成配置文件</p><p>这时候，项目根目录下自动生成了<code>.eslintrc.js</code> 配置文件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">browser</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">es2021</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">airbnb-base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>在<code>webpack.config.ts</code>中配置<code>ESlint</code>插件，<code>plugins</code>属性中添加<code>ESLintPlugin</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ESLintPlugin </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// plugins</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESLintPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/node_modules/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span></code></pre></div><p>提示：如果你是使用<code>vscode</code>编辑器，需要到插件市场中安装 <code>ESLint</code> 插件并开启<code>ESlint</code>服务。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654718.png" alt="16"></p><p>测试下是否配置成功，可以在一个ts文件中，声明一个变量，不要添加分号，这个时候编辑器会显示红色波浪线来提示你。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654719.png" alt=""></p><p>打开在<code>vscode</code>编辑器的<code>settings.json</code>配置文件，添加以下代码：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">editor.codeActionsOnSave</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">source.fixAll.eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当我们配置<code>ESlint</code>之后，会弹出很多红色的波浪线，这个时候如果按上面的方法一个个去点击修复的话效率很慢，那有没有什么快捷的方法来解决这个问题呢？</p><p>sure ！！</p><p><code>eslint</code>提供了<code>--fix</code> 选项，Automatically fix problems（自动修复问题），所以我们在<code>package.json</code>中添加一个快捷脚本，自动修复<code>src</code>文件夹下的后缀名为<code>js</code>和<code>ts</code>的文件，<code>--ext</code>选项，是指定修复的目录。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">eslint --fix --ext .js,.ts src</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>执行<code>npm run lint</code>，修复当前项目中所有的问题。</p><h2 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-hidden="true">#</a></h2><p>husky 是一个 <code>Git Hook</code> 工具。主要实现提交前 <code>eslint</code> 校验和 <code>commit</code> 信息的规范校验。我们项目已经具有了编码规范检测，但某些时候，有可能遗漏了一两个规范警告提示，甚至是视而不见！关闭检测工具按照自己原来的编码规范来书写代码。为了解决这个问题，我们需要限制“有问题”的代码的提交，来保证GIT仓库中的代码全都是符合<code>ESlint</code>规范的，这个时候我们需要用到<code>husky</code>了。</p><p>执行<code>husky-init</code> 命令快速在项目初始化一个 husky 配置。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">npx husky-init &amp;&amp; npm install</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>执行完成之后，它就配置完毕了，对的 就是这么简单。</p><p>不过，还是需要手动修改下文件的，打开<code>.husky\\pre-commit</code>文件，把npm test命令替换成<code>eslint --fix --ext .js,.ts src</code>。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654720.png" alt="18"></p><p>这个<code>pre-commit</code>是一个hook文件，作用是当我们执行<code>git commit</code>的时候，会先对项目执行一遍<code>eslint --fix --ext .js,.ts src</code>，如果<code>ESlint</code>通过，即<code>commit</code>成功，否则停止<code>commit</code>。</p><h2 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a></h2><p><code>lint-staged</code> 是一个在<code>git</code>暂存文件上运行<code>linters</code>的工具，当我们运行<code>eslint</code>或<code>stylelint</code>的命令时，只会检查我们通过<code>git add</code>添加到暂存区的文件，可以避免我们每次检查都把整个项目的代码都检查一遍。</p><p>安装 <code>lint-staged</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint-staged</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"></span></code></pre></div><p>在<code>package.json</code>中添加<code>lint-staged</code>配置项。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">*.{js,ts}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span></code></pre></div><p>这行命令表示：只对 <code>git</code> 暂存区的<code>.js</code>、<code>.ts</code> 文件执行 <code>eslint --fix</code></p><p>修改<code>.husky / pre-commit</code>文件，把<code>eslint --fix --ext .js,.ts src</code>命令替换成<code>npx lint-staged</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">npx lint-staged</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654721.png" alt="19"></p><h2 id="调试环境" tabindex="-1">调试环境 <a class="header-anchor" href="#调试环境" aria-hidden="true">#</a></h2><p>在实际开发中，我们不可能一直通过<code>build</code>指令将项目进行合并打包再打开查看，这样子会使得开发调试效率非常之慢。我们给我们提供了一个叫<code>webpack-dev-server</code>的插件，它可以给我们提供一个临时服务器，可以将我们项目打包后的文件放到这个服务器中供我们开发者进行浏览，调试</p><h2 id="安装webpack-dev-server插件" tabindex="-1">安装<code>webpack-dev-server</code>插件 <a class="header-anchor" href="#安装webpack-dev-server插件" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack-dev-server</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@types/webpack-dev-server</span></span>
<span class="line"></span></code></pre></div><h2 id="配置插件" tabindex="-1">配置插件 <a class="header-anchor" href="#配置插件" aria-hidden="true">#</a></h2><p>引入插件，在配置类型方面，我们需要做出一些修改，原本我们的配置对象模块中用的是<code>webpack</code>包中的<code>config</code>类型，但现在我们需要用到另外一个模块（<code>webpack-dev-server</code>）要在配置对象中配置<code>devServer</code>属性，而<code>webpack</code>中的<code>config</code>中没有<code>devServer</code>这个类型的属性，我们定义一个<code>Configuration</code>接口作为配置文件的类型，让它继承下<code>webpack</code>包中的<code>config</code>，当它底下有<code>devServer</code>的时候则对应上<code>WebpackDevServerConfiguration</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里忽略一些代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Configuration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebpackConfiguration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Configuration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebpackDevServerConfiguration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-dev-server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Configuration</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebpackConfiguration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebpackDevServerConfiguration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里忽略一些代码</span></span>
<span class="line"></span></code></pre></div><p>在<code>config</code>中，加入<code>devServer</code>属性 <a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noreferrer">更多配置请参考</a></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Configuration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里忽略一些代码</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">contentBase</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在<code>package,json</code>中的<code>script</code>属性中加入<code>serve</code>，这里的<code>--open</code>指的是当服务构建完成之后自动打开对应的<code>URL</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --fix --ext .js,.ts src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack serve --open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"></span></code></pre></div><p>执行<code>npm run serve</code>后，<code>webserver</code>将开始运行构建一个服务环境，对应的<code>URL</code>地址也在<code>terminal</code>中显示出来，<code>webserver</code>也会自动的帮我们打开浏览器访问对应的<code>URL</code>地址。</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161653679.png" alt="1"></p><p>现在，当我们在<code>index.html</code>中修改一些代码时，<code>webpack-dev-server</code>会监听到项目下代码的修改，立即将修改后的代码重新进行打包合并，更新后服务中 ，页面也会进行相对应的改变</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- src/pages/index/index.html --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IE=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">my juejin home page: https://juejin.cn/user/2858385965322935/posts</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h3</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/202203161654722.png" alt="2"></p><p>关于<code>webpack-dev-server</code>该插件还有很多的配置项，这里我们只是做了简单的配置，如果你想了解更多的配置，<a href="https://github.com/webpack/webpack-dev-server#usage" target="_blank" rel="noreferrer">请移至插件配置文档</a></p><h2 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-hidden="true">#</a></h2><p>在传统的页面中，更新页面的内容需要刷新整个页面，但在前端开发中，往往离不开网络数据的请求，我们需要调用后端写好的API进行数据请求，将数据内容渲染到页面中。这里我们使用<code>axios</code>这个第三方请求库</p><h2 id="安装axios" tabindex="-1">安装<code>axios</code> <a class="header-anchor" href="#安装axios" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">axios</span></span>
<span class="line"></span></code></pre></div><h2 id="直接请求-不推荐" tabindex="-1">直接请求 （ 不推荐 ） <a class="header-anchor" href="#直接请求-不推荐" aria-hidden="true">#</a></h2><p>最简单粗暴的方法，你可以直接通过<code>axios</code>对<code>URL</code>进行<code>get</code> <code>post</code>的请求，但不建议这样子操作，在日常开发我们会将请求回来的数据进行处理再交给对应的组件去处理渲染，如果你直接通过以下方式来请求，那么你的项目中每个请求可能会出现很多重复的代码，你也许会说将这些重复的代码进行一个封装处理，但这不是最好方法，<code>axios</code>给我们提供了拦截器功能，在请求发送前和请求响应后可以统一处理后再交给对应的页面处理，这样子可以大大降低代码的耦合度以及方便后续开发中对代码的维护，还可以对<code>API</code>集中管理 <strong>请继续往下看</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> axios </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(url[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> config])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;">(url[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> config]])</span><span style="color:#89DDFF;">..</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="配置全局网络请求实例" tabindex="-1">配置全局网络请求实例 <a class="header-anchor" href="#配置全局网络请求实例" aria-hidden="true">#</a></h2><p>在<code>src</code>文件夹下创建<code>network</code>文件夹，作为项目网络请求的管理文件夹，在其下面创建<code>request.ts</code>文件，配置项目全局<code>axios</code>实例。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/network/request.ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入axios以及一些类型</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> axios</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">AxiosInstance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AxiosRequestConfig</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AxiosResponse</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AxiosPromise</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> responseInterceptor </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Interceptors/responseInterceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosRequestConfig</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">AxiosPromise</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 配置全局参数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AxiosRequestConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    baseURL</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://127.0.0.1:8000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    timeout</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    headers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AxiosInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">axios</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cfg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置请求拦截器</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AxiosRequestConfig</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置响应拦截器</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// eslint-disable-next-line max-len</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interceptors</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AxiosResponse</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">responseInterceptor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">instance</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>在<code>src/network/Interceptors</code>文件夹中创建<code>responseInterceptor.ts</code>文件，配置<code>axios</code>实例的响应拦截器，处理从服务器端中请求回来的数据</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/network/Interceptors/responseInterceptor.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">AxiosResponse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">axios</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosResponse</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果http响应状态码response.status正常，则直接返回数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//    当请求状态码和后端返回的errCode异常</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//    其他处理操作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">errCode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="api集中管理" tabindex="-1">API集中管理 <a class="header-anchor" href="#api集中管理" aria-hidden="true">#</a></h2><p>在项目中，我们常常会使用到很多的<code>API</code>地址，我们需要将这些集中起来管理，按页面来分类之后将每一个API封装成对应的一个API请求函数，之后我们在对应的页面调用就可以直接拿到数据处理了，后面如果<code>API</code>地址有更改我们也可以从对应页面中的文件进行修改，这给我们开发带了很大的好处！</p><p>在<code>network</code>文件夹中创建一个<code>api</code>文件夹，里边我定义了一个<code>home.ts</code>文件，作为<code>home</code>页面中的API管理文件，之后如果页面</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/network/api/home.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> request </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getHomeTopNav </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">request</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/get_home_top_nav</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> homePageArticle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">request</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/home_page_article</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="使用api" tabindex="-1">使用API <a class="header-anchor" href="#使用api" aria-hidden="true">#</a></h2><p>在页面中，我们引入封装好的<code>API</code>函数，使用<code>async await</code>将函数再包装一层，请求回来的数据将在这个函数中进行二次处理，例如将数据进行一个大小写转换，长度分割等操作。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getHomeTopNav</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">homePageArticle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../../network/api/home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getDataHomeTopNav </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getHomeTopNav</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 忽略一些代码</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getDataHomePageArticle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">homePageArticle</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 忽略一些代码</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">getDataHomeTopNav</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">getDataHomePageArticle</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-hidden="true">#</a></h2><p>本文从初始化项目开始到项目结构搭建，多页面的配置再到代码提交规范这些平时常用到的一些配置选项都集成到了<code>webpack-template</code>中,手把手地带领大家将一个空的文件夹构建一个前端开发项目模板，目的也是方便我们平时使用<code>webpack</code>环境时，减少繁琐的配置从而节约时间。</p><blockquote><p><code>webpack-template</code> GIT地址：<a href="https://github.com/QC2168/webpack-template" target="_blank" rel="noreferrer">https://github.com/QC2168/webpack-template</a></p></blockquote>`,147),e=[o];function t(c,r,D,y,F,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
