import{_ as s,o as n,c as a,a as l}from"./app.5defb350.js";const A=JSON.parse('{"title":"axios无感刷新Token","description":"","frontmatter":{"title":"axios无感刷新Token","tags":["JavaScript"]},"headers":[{"level":2,"title":"什么是JWT","slug":"什么是jwt","link":"#什么是jwt","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"相比传统session的区别","slug":"相比传统session的区别","link":"#相比传统session的区别","children":[]},{"level":2,"title":"为什么说JWT不需要额外的开销","slug":"为什么说jwt不需要额外的开销","link":"#为什么说jwt不需要额外的开销","children":[]},{"level":2,"title":"标头 header","slug":"标头-header","link":"#标头-header","children":[]},{"level":2,"title":"负荷 payload","slug":"负荷-payload","link":"#负荷-payload","children":[]},{"level":2,"title":"签章 signature","slug":"签章-signature","link":"#签章-signature","children":[]},{"level":2,"title":"JWT优势和弊端","slug":"jwt优势和弊端","link":"#jwt优势和弊端","children":[]},{"level":2,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":2,"title":"弊端","slug":"弊端","link":"#弊端","children":[]},{"level":2,"title":"关于refreshToken","slug":"关于refreshtoken","link":"#关于refreshtoken","children":[]},{"level":2,"title":"为什么会有refreshToken","slug":"为什么会有refreshtoken","link":"#为什么会有refreshtoken","children":[]},{"level":2,"title":"使用refreshToken可以提高安全性","slug":"使用refreshtoken可以提高安全性","link":"#使用refreshtoken可以提高安全性","children":[]},{"level":2,"title":"关于JWT无感刷新TOKEN方案（结合axios）","slug":"关于jwt无感刷新token方案-结合axios","link":"#关于jwt无感刷新token方案-结合axios","children":[]},{"level":2,"title":"业务需求","slug":"业务需求","link":"#业务需求","children":[]},{"level":2,"title":"话不多说，先上代码","slug":"话不多说-先上代码","link":"#话不多说-先上代码","children":[]},{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[]},{"level":2,"title":"抽离代码","slug":"抽离代码","link":"#抽离代码","children":[]}],"relativePath":"article/axios无感刷新Token.md"}'),o={name:"article/axios无感刷新Token.md"},p=l(`<h2 id="什么是jwt" tabindex="-1">什么是JWT <a class="header-anchor" href="#什么是jwt" aria-hidden="true">#</a></h2><p><code>JWT</code>是全称是<code>JSON WEB TOKEN</code>，是一个开放标准，用于将各方数据信息作为JSON格式进行对象传递，可以对数据进行可选的数字加密，可使用<code>RSA</code>或<code>ECDSA</code>进行公钥/私钥签名。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-hidden="true">#</a></h2><p><code>JWT</code>最常见的使用场景就是缓存当前用户登录信息，当用户登录成功之后，拿到<code>JWT</code>，之后用户的每一个请求在请求头携带上<code>Authorization</code>字段来辨别区分请求的用户信息。且不需要额外的资源开销。</p><h2 id="相比传统session的区别" tabindex="-1">相比传统session的区别 <a class="header-anchor" href="#相比传统session的区别" aria-hidden="true">#</a></h2><p>比起传统的<code>session</code>认证方案，为了让服务器能识别是哪一个用户发过来的请求，都需要在服务器上保存一份用户的登录信息（通常保存在内存中），再与浏览器的<code>cookie</code>打交道。</p><ul><li>安全方面 由于是使用<code>cookie</code>来识别用户信息的，如果<code>cookie</code>被拦截，用户会很容易受到跨站请求伪造的攻击。</li><li>负载均衡 当服务器A保存了用户A的数据之后，在下一次用户A服务器A时由于服务器A访问量较大，被转发到服务器B，此时服务器B没有用户A的数据，会导致<code>session</code>失效。</li><li>内存开销 随着时间推移，用户的增长，服务器需要保存的用户登录信息也就越来越多的，会导致服务器开销越来越大。</li></ul><h2 id="为什么说jwt不需要额外的开销" tabindex="-1">为什么说JWT不需要额外的开销 <a class="header-anchor" href="#为什么说jwt不需要额外的开销" aria-hidden="true">#</a></h2><p><code>JWT</code>为三个部分组成，分别是<code>Header</code>，<code>Payload</code>，<code>Signature</code>，使用<code>.</code>符号分隔。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 像这样子</span></span>
<span class="line"><span style="color:#A6ACCD;">xxxxx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yyyyy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zzzzz</span></span>
<span class="line"></span></code></pre></div><h2 id="标头-header" tabindex="-1">标头 header <a class="header-anchor" href="#标头-header" aria-hidden="true">#</a></h2><p>标头是一个<code>JSON</code>对象，由两个部分组成，分别是令牌是类型（<code>JWT</code>）和签名算法（<code>SHA256</code>，<code>RSA</code>）</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">alg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HS256</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">typ</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JWT</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="负荷-payload" tabindex="-1">负荷 payload <a class="header-anchor" href="#负荷-payload" aria-hidden="true">#</a></h2><p>负荷部分也是一个<code>JSON</code>对象，用于存放需要传递的数据，例如用户的信息</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>此外，JWT规定了7个可选官方字段（建议）</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>iss</td><td>JWT签发人</td></tr><tr><td>exp</td><td>JWT过期时间</td></tr><tr><td>sub</td><td>JWT面向用户</td></tr><tr><td>aud</td><td>JWT接收方</td></tr><tr><td>nbf</td><td>JWT生效时间</td></tr><tr><td>iat</td><td>JWT签发时间</td></tr><tr><td>jti</td><td>JWT编号</td></tr></tbody></table><h2 id="签章-signature" tabindex="-1">签章 signature <a class="header-anchor" href="#签章-signature" aria-hidden="true">#</a></h2><p>这一部分，是由前面两个部分的签名，防止数据被篡改。 在服务器中指定一个密钥，使用标头中指定的签名算法，按照下面的公式生成这签名数据</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">HMACSHA256</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">base64UrlEncode</span><span style="color:#A6ACCD;">(header) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">base64UrlEncode</span><span style="color:#A6ACCD;">(payload)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  secret)</span></span>
<span class="line"></span></code></pre></div><p>在拿到签名数据之后，把这三个部分的数据拼接起来，每个部分中间使用<code>.</code>来分隔。这样子我们就生成出一个了<code>JWT</code>数据了，接下来返回给客户端储存起来。而且客户端在发起请求时，携带这个<code>JWT</code>在请求头中的<code>Authorization</code>字段，服务器通过解密的方式即可识别出对应的用户信息。</p><h2 id="jwt优势和弊端" tabindex="-1">JWT优势和弊端 <a class="header-anchor" href="#jwt优势和弊端" aria-hidden="true">#</a></h2><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-hidden="true">#</a></h2><ul><li>数据体积小，传输速度快</li><li>无需额外资源开销来存放数据</li><li>支持跨域验证使用</li></ul><h2 id="弊端" tabindex="-1">弊端 <a class="header-anchor" href="#弊端" aria-hidden="true">#</a></h2><ul><li>生成出来的<code>Token</code>无法撤销，即使重置账号密码之前的<code>Token</code>也是可以使用的（需等待JWT过期）</li><li>无法确认用户已经签发了多少个<code>JWT</code></li><li>不支持<code>refreshToken</code></li></ul><h2 id="关于refreshtoken" tabindex="-1">关于refreshToken <a class="header-anchor" href="#关于refreshtoken" aria-hidden="true">#</a></h2><p><code>refreshToken</code>是<code>Oauth2</code>认证中的一个概念，和<code>accessToken</code>一起生成出来的。</p><p>当用户携带的这个<code>accessToken</code>过期时，用户就需要在重新获取新的<code>accessToken</code>，而<code>refreshToken</code>就用来重新获取新的<code>accessToken</code>的凭证。</p><p><code>refreshToken</code>是在生成<code>accessToken</code>时，一起生成出来返回给客户端的。</p><h2 id="为什么会有refreshtoken" tabindex="-1">为什么会有refreshToken <a class="header-anchor" href="#为什么会有refreshtoken" aria-hidden="true">#</a></h2><p>当你第一次接触<code>JWT</code>的时候，你有没有一个这样子的疑惑，为什么需要<code>refreshToken</code>这个东西，而不是服务器端给一个期限较长甚至永久性的<code>accessToken</code>呢？</p><p>抱着这个疑惑我在网上搜寻了一番，</p><p>其实这个<code>accessToken</code>的使用期限有点像我们生活中的入住酒店，当我们在入住酒店时，会出示我们的身份证明来登记获取房卡，此时房卡相当于<code>accessToken</code>，可以访问对应的房间，当你的房卡过期之后就无法再开启房门了，此时就需要再到前台更新一下房卡，才能正常进入，这个过程也就相当于<code>refreshToken</code>。</p><p><code>accessToken</code>使用率相比<code>refreshToken</code>频繁很多，如果按上面所说如果<code>accessToken</code>给定一个较长的有效时间，就会出现不可控的权限泄露风险。</p><h2 id="使用refreshtoken可以提高安全性" tabindex="-1">使用refreshToken可以提高安全性 <a class="header-anchor" href="#使用refreshtoken可以提高安全性" aria-hidden="true">#</a></h2><ul><li><p>用户在访问网站时，<code>accessToken</code>被盗取了，此时攻击者就可以拿这个<code>accessToke</code>访问权限以内的功能了。如果<code>accessToken</code>设置一个短暂的有效期2小时，攻击者能使用被盗取的<code>accessToken</code>的时间最多也就2个小时，除非再通过<code>refreshToken</code>刷新<code>accessToken</code>才能正常访问。</p></li><li><p>设置<code>accessToken</code>有效期是永久的，用户在更改密码之后，之前的<code>accessToken</code>也是有效的</p></li></ul><p>总体来说有了<code>refreshToken</code>可以降低<code>accessToken</code>被盗的风险</p><h2 id="关于jwt无感刷新token方案-结合axios" tabindex="-1">关于JWT无感刷新TOKEN方案（结合axios） <a class="header-anchor" href="#关于jwt无感刷新token方案-结合axios" aria-hidden="true">#</a></h2><h2 id="业务需求" tabindex="-1">业务需求 <a class="header-anchor" href="#业务需求" aria-hidden="true">#</a></h2><p>在用户登录应用后，服务器会返回一组数据，其中就包含了<code>accessToken</code>和<code>refreshToken</code>，每个<code>accessToken</code>都有一个固定的有效期，如果携带一个过期的<code>token</code>向服务器请求时，服务器会返回401的状态码来告诉用户此<code>token</code>过期了，此时就需要用到登录时返回的<code>refreshToken</code>调用刷新<code>Token</code>的接口（<code>Refresh</code>）来更新下新的<code>token</code>再发送请求即可。</p><h2 id="话不多说-先上代码" tabindex="-1">话不多说，先上代码 <a class="header-anchor" href="#话不多说-先上代码" aria-hidden="true">#</a></h2><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-hidden="true">#</a></h2><p><code>axios</code>作为最热门的<code>http</code>请求库之一，我们本篇文章就借助它的错误响应拦截器来实现<code>token</code>无感刷新功能。</p><h2 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-hidden="true">#</a></h2><blockquote><p>本次基于<a href="https://github.com/QC2168/axios-bz" target="_blank" rel="noreferrer">axios-bz</a>代码片段封装响应拦截器 可直接配置到你的项目中使用 ✈️ ✈️</p></blockquote><p>利用<code>interceptors.response</code>，在业务代码获取到接口数据之前进行状态码<code>401</code>判断当前携带的<code>accessToken</code>是否失效。 下面是关于<code>interceptors.response</code>中异常阶段处理内容。当响应码为401时，响应拦截器会走中第二个回调函数<code>onRejected</code></p><blockquote><p>下面代码分段可能会让大家阅读起来不是很顺畅，我直接把整份代码贴在下面，且每一段代码之间都添加了对应的注释</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 最大重发次数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MAX_ERROR_COUNT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当前重发次数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> currentCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 缓存请求队列</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">)[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当前是否刷新状态</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isRefresh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosError</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseDataType</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clearAuth</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">身份过期，请重新登录</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 清空数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 为了节省多余的代码，这里仅展示处理状态码为401的情况</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">401</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// accessToken失效</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断本地是否有缓存有refreshToken</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">refreshToken</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refresh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">??</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">refreshToken</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">clearAuth</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 提取请求的配置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断是否refresh失败且状态码401，再次进入错误拦截器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refresh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">clearAuth</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 判断当前是否为刷新状态中（防止多个请求导致多次调refresh接口）</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">isRefresh</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 设置当前状态为刷新中</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">isRefresh</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果重发次数超过，直接退出登录</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">currentCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MAX_ERROR_COUNT</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">clearAuth</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 增加重试次数</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">currentCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">access</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">UserAuthApi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">refreshToken</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">refreshToken</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 请求成功，缓存新的accessToken</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">token</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">access</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 重置重发次数</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">currentCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 遍历队列，重新发起请求</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">access</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 返回请求数据</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ApiInstance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 刷新token失败，直接退出登录</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请重新登录</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 重置状态</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">isRefresh</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 当前正在尝试刷新token，先返回一个promise阻塞请求并推进请求列表中</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 缓存网络请求，等token刷新后直接执行</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newToken</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#89DDFF;">!,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">authorization</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newToken</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// @ts-ignore</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ApiInstance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseDataType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="抽离代码" tabindex="-1">抽离代码 <a class="header-anchor" href="#抽离代码" aria-hidden="true">#</a></h2><p>把上面关于调用刷新<code>token</code>的代码抽离成一个<code>refreshToken</code>函数，单独处理这一情况，这样子做有利于提高代码的可读性和维护性，且让看上去代码不是很臃肿</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// refreshToken.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">refreshToken</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosError</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseDataType</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    将上面 if (statusCode === 401) 中的代码贴进来即可，这里就不重复啦</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    代码仓库地址: https://github.com/QC2168/axios-bz/blob/main/Interceptors/hooks/refreshToken.ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>经过上面的逻辑抽离，现在看下拦截器中的代码就很简洁了，后续如果要调整相关逻辑直接在<code>refreshToken.ts</code>文件中调整即可。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> refreshToken </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./refreshToken.ts</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosError</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseDataType</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 为了节省多余的代码，这里仅展示处理状态码为401的情况</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">401</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">refreshToken</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div>`,55),e=[p];function t(c,r,F,y,D,i){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
