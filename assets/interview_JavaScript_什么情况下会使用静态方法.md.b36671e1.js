import{_ as s,c as a,o as n,a as l}from"./app.80f5f127.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么情况下会使用静态方法","slug":"什么情况下会使用静态方法","link":"#什么情况下会使用静态方法","children":[]}],"relativePath":"interview/JavaScript/什么情况下会使用静态方法.md"}'),o={name:"interview/JavaScript/什么情况下会使用静态方法.md"},p=l(`<h2 id="什么情况下会使用静态方法" tabindex="-1">什么情况下会使用静态方法 <a class="header-anchor" href="#什么情况下会使用静态方法" aria-hidden="true">#</a></h2><p>静态方法可以直接通过类来调用，而不需要事先<code>new</code>出一个类的实例。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ClassWithStaticMethod</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">staticProperty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">staticMethod</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">static method has been called.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Class static initialization block called</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ClassWithStaticMethod</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">staticProperty)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Expected output: &quot;someValue&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ClassWithStaticMethod</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">staticMethod</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Expected output: &quot;static method has been called.&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>当一个方法使用频率比较高时，而且不需要依赖其他类成员，则可以使用静态方法。避免频繁实例化对象导致资源占用问题。</li><li>静态的成员和方法是在构造时就产生的，在运行结束前它不会被垃圾回收掉，会一直占据一定的空间（如果方法不经常被调用，使用实例方法会更好）</li><li>可以用于封装某些方法，例如<code>Math.max()</code>，因为这些对象无需依赖类中的任何一个对象和方法，也属于计算方面的方法，所以采用静态方法会更好</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>静态方法中是无法调用任何非静态的成员的</p><p>静态方法可以被子类重写，但不会影响原父类方法</p></div>`,5),t=[p];function e(c,r,i,y,D,F){return n(),a("div",null,t)}const d=s(o,[["render",e]]);export{A as __pageData,d as default};
