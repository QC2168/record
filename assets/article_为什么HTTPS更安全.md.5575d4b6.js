import{_ as e,c as o,o as c,O as t}from"./chunks/framework.488fce0c.js";const m=JSON.parse('{"title":"HTTPS为什么更安全","description":"","frontmatter":{"title":"HTTPS为什么更安全","tags":["network"]},"headers":[],"relativePath":"article/为什么HTTPS更安全.md"}'),d={name:"article/为什么HTTPS更安全.md"},a=t('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在互联网时代，我们每天都在进行着与网络有关的活动，而网络安全问题也因此成为大家越来越关注的话题。<code>http</code>协议作为最常用的网络传输协议之一，其设计缺陷让黑客攻击变得更加容易。相比之下，<code>https</code>协议通过加密通信，能够更有效地保护用户隐私和数据安全。</p><p>本文将为您介绍什么是<code>https</code>，为什么它比<code>http</code>更安全，帮助您更好地了解网络安全问题。</p><h3 id="什么是https" tabindex="-1">什么是https <a class="header-anchor" href="#什么是https" aria-label="Permalink to &quot;什么是https&quot;">​</a></h3><p><code>https</code>是<code>http</code>的加强版（<code>HTTP+SSL</code>），因为<code>http</code>特性是明文传输，因此到每个传输的环节中数据都有可能被第三方篡改的可能，也就是我们所说是中间人攻击。为了数据的安全，提出了<code>https</code>这个方案</p><p>但它不是一个新的协议，原理上是在<code>http</code>和<code>tcp</code>层之间建立一个中间层（也叫安全层），在不像之前<code>http</code>一样，直接进行数据通信，这个中间层会对数据进行加密处理，将加密后的数据给<code>TCP</code>，<code>TCP</code>再将数据包进行解密处理才能传给上游的<code>http</code>。</p><blockquote><p>http是位于OSI网络模型中的<strong>应用层</strong></p></blockquote><blockquote><p>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议</p></blockquote><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230112112331.png" alt="20230112112331"></p><p>在采用了<code>SSL</code>后，<code>http</code>就拥有了<code>https</code>的加密，证书，完整性保护功能。</p><p>换句话说，安全性是由<code>SSL</code>来保证的</p><h3 id="ssl-tls" tabindex="-1">SSL/TLS <a class="header-anchor" href="#ssl-tls" aria-label="Permalink to &quot;SSL/TLS&quot;">​</a></h3><p><code>SSL</code> 即 安全套接层(<code>Secure Sockets Layer</code>)，在<code>OSI</code>模型中处于第<code>5</code>层。在<code>1999</code>年<code>SSL</code>更名为<code>TLS</code>(传输层安全)，正式标准化。</p><p>在<code>TLS</code>中使用了两种加密技术，分别是对称加密和非对称加密</p><blockquote><p>提到 TLS ,就要说下 OpenSSL ,它是一个开源密码学程序库和工具包，支持了所有公开的加密算法和协议，许多应用软件都适用它作为底层库来实现 TLS 功能，例如 Apache、Nginx等。</p></blockquote><h2 id="加密技术" tabindex="-1">加密技术 <a class="header-anchor" href="#加密技术" aria-label="Permalink to &quot;加密技术&quot;">​</a></h2><h3 id="对称加密-symmetric-cryptography" tabindex="-1">对称加密 Symmetric Cryptography <a class="header-anchor" href="#对称加密-symmetric-cryptography" aria-label="Permalink to &quot;对称加密 Symmetric Cryptography&quot;">​</a></h3><p>对称加密常见的加密算法有：<code>DES</code>、<code>AES</code>、<code>IDEA</code>等</p><p>这个很好理解，对称加密指的是加密和解密的方式都是使用同一把钥匙（密保）</p><p><strong>缺点：</strong></p><ul><li>服务器端也会把密钥提供给对方进行解密，如果密钥传递的过程中被窃取那就没有加密的意义了</li></ul><h3 id="非对称加密-asymmetric-cryptography" tabindex="-1">非对称加密 Asymmetric Cryptography <a class="header-anchor" href="#非对称加密-asymmetric-cryptography" aria-label="Permalink to &quot;非对称加密 Asymmetric Cryptography&quot;">​</a></h3><p>非对称加密常见的算法有：<code>RSA</code>、<code>DSA</code>、<code>DH</code>等</p><p>非对称加密会有两把解密的密钥分别是<code>A</code>和<code>B</code>，<code>A</code>加密后的数据包只能通过密钥<code>B</code>来解密，反之，<code>B</code>加密的数据包只能通过<code>A</code>来解密</p><p>其中，<code>A</code>是公钥，<code>B</code>是私钥，这两把钥匙是不一样，公钥可以给任何人使用，私钥则必须保密。</p><p>这样子做可以防止密钥被攻击者窃取后用来获取数据</p><p><strong>缺点：</strong></p><ul><li>公钥是公开的，攻击者可以截获公钥后解密服务器发送过来的密钥</li><li>公钥不包含服务器信息，使用这个方案无法确保服务器身份的合法性，存在中间人攻击风险</li><li>使用非对称加密在数据加密解密过程需要消耗一定时间，降低了数据传输效率</li></ul><h3 id="hash算法" tabindex="-1">hash算法 <a class="header-anchor" href="#hash算法" aria-label="Permalink to &quot;hash算法&quot;">​</a></h3><p>例如<code>sha256</code>、<code>sha1</code>、<code>md5</code>这些用来确定数据的完整性，是否有被篡改过，主要用来生成签名信息。</p><h3 id="混合加密" tabindex="-1">混合加密 <a class="header-anchor" href="#混合加密" aria-label="Permalink to &quot;混合加密&quot;">​</a></h3><p><code>HTTPS</code>采用的是混合加密方案（即：对称加密和非对称加密的结合）</p><p>非对称加密的安全性比较高，但是解密速度会比较慢。</p><p>当数据进行第一次通信时，使用非对称加密算法（解决安全性问题）交互对称密钥，在这之后的每一次通信都采用对称加密来进行交互。这样子性能和安全也可以得到均衡。</p><p>混合加密总用了<code>4</code>把钥匙</p><ul><li>非对称加密<code>A</code>+私钥<code>B</code></li><li>对称加密私钥<code>C</code>和私钥<code>D</code></li></ul><blockquote><p>内容传输时使用对称加密，证书验证阶段使用非对称加密</p></blockquote><h3 id="https工作过程" tabindex="-1">HTTPS工作过程 <a class="header-anchor" href="#https工作过程" aria-label="Permalink to &quot;HTTPS工作过程&quot;">​</a></h3><ol><li>客户端发起一个网络请求。</li><li>服务器将自己的信息以数字证书的方式给了客户端（证书里面含有密钥公钥，地址，证书颁发机构等信息），其中的公钥是用来加密信息的。</li><li>当客户端接收到这个信息之后，会验证证书的完整性。（当证书有效继续下一步，否则显示警告信息）</li><li>客户端生成一个对称密钥并用第二步中的证书公钥进行加密发送给服务器端，</li><li>服务器用私钥解密获取对此密钥。（也证明了服务器是私钥的持有者）</li><li>接下来的通话使用该密钥进行通讯。</li></ol><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230409202418.png" alt="20230409202418"></p><h3 id="https运行原理" tabindex="-1">HTTPS运行原理 <a class="header-anchor" href="#https运行原理" aria-label="Permalink to &quot;HTTPS运行原理&quot;">​</a></h3><p>浏览器拿到证书后，会先读取<code>issuer</code>（发布机构），然后在操作系统中内置的<strong>受信任的发布机构中查找证书，是否匹配</strong>，如果没有找到证书，说明证书有问题，如果找到了，就会拿上级证书的公钥去解密本级证书，得到数字指纹<code>hash</code>，然后对本级证书进行数字摘要算法（证书中提供的指纹加密算法）计算结果，与解密得到的指纹对比。如果一样，说明证书没有被修改过。公钥可以放心使用，可以开始握手通信了。</p><h4 id="证书从哪里来" tabindex="-1">证书从哪里来 <a class="header-anchor" href="#证书从哪里来" aria-label="Permalink to &quot;证书从哪里来&quot;">​</a></h4><ul><li>在安装系统的时候，受信任的证书发布机构的数字证书就已经被微软安装在操作系统中</li></ul><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230409202800.png" alt="20230409202800"></p><h4 id="什么时候证书不可信" tabindex="-1">什么时候证书不可信 <a class="header-anchor" href="#什么时候证书不可信" aria-label="Permalink to &quot;什么时候证书不可信&quot;">​</a></h4><ul><li>证书不是权威<code>CA</code>颁发（一些企业贪图便宜使用盗版证书，没有经过<code>CA</code>认证，也就无法通过使用浏览器内置<code>CA</code>公钥进行验证）</li><li>证书过期</li><li>证书部署错误，例如证书和域名信息不匹配</li></ul><h3 id="https优劣势" tabindex="-1">HTTPS优劣势 <a class="header-anchor" href="#https优劣势" aria-label="Permalink to &quot;HTTPS优劣势&quot;">​</a></h3><p><strong>优势</strong></p><ul><li>提高<code>Web</code>数据安全性</li><li>加密用户数据</li><li>提高搜索引擎排序</li><li>浏览器不会出现非“不安全”警告</li><li>提高用户对站点的信赖</li><li>增加了中间人攻击成本</li></ul><p><strong>缺点</strong></p><ul><li><code>https</code>协议在握手时耗时会大一些，影响整体加载速度</li><li>客户端和服务器端会使用更大的性能来处理数据加解密</li><li><code>SSL</code>证书需要支付一定的费用来获取</li><li>也不是绝对的安全，当网站被攻击，服务器被劫持时，<code>HTTPS</code>起不到任何作用</li><li><code>SSL</code>证书通常需要绑定<code>IP</code>，不能在同一IP上绑定多个域名，<code>IPv4</code>资源不可能支撑这个消耗</li></ul><h3 id="数字证书认证" tabindex="-1">数字证书认证 <a class="header-anchor" href="#数字证书认证" aria-label="Permalink to &quot;数字证书认证&quot;">​</a></h3><p>结合了两种加密方式可以实现数据的加密传输，但安全性还远远不够</p><p>如果攻击者采用了<code>DNS</code>劫持，将目标地址替换成攻击者指定的地址，之后服务器再伪造一份公钥和私钥，也能对数据进行处理，而客户端此时也不知道正在访问一个危险的服务器</p><p><code>HTTPS</code>在混合加密的基础上，再追加了<strong>数字证书认证</strong>步骤，目的就是为了让服务器证明自己的身份</p><p>在传输过程中，服务器运营者需要向第三方认证机构（<code>CA</code>，<code>Certificate Authority</code>）获取授权，在认证通过之后<code>CA</code>会给服务器颁发数字证书</p><p>这个证书的作用就是用来证明服务器身份，还有就是把公钥传递给客户端</p><p>当客户端获取到数字证书后，会读取其明文内容，<code>CA</code>在对数字证书签名时会保存一个<code>hash</code>函数，这个函数是用来计算明文的内容得到<code>数据A</code>，然后用公钥解密明文内容得到<code>数据B</code>，再对这两份数据进行对比，如果一致就代表认证合法。</p><h3 id="为什么要使用https" tabindex="-1">为什么要使用https？ <a class="header-anchor" href="#为什么要使用https" aria-label="Permalink to &quot;为什么要使用https？&quot;">​</a></h3><p><strong>它们之间有什么区别吗？</strong></p><p>通过上面的介绍，我们可以了解到<code>http</code>在传输过程是明文的，数据容易被黑客截取或者篡改，这会导致用户信息泄露，而<code>https</code>通过<code>ssl</code>进行通讯加密处理，就算被截取了，也无法解读数据</p><p>另外，除了安全性方面，<code>https</code>和<code>http</code>还有以下区别：</p><ul><li>由于<code>https</code>需要对数据进行加解密，所以会增加服务器和客户端的消耗更多的性能资源来处理，同时也增加了响应速度</li><li><code>https</code>需要申请证书和验证，<code>http</code>则不需要</li></ul>',64),l=[a];function i(r,p,h,s,n,u){return c(),o("div",null,l)}const T=e(d,[["render",i]]);export{m as __pageData,T as default};
