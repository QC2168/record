import{_ as s,o as i,c as a,R as t}from"./chunks/framework.sdpcv3_n.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/Vue/指令篇.md","filePath":"interview/Vue/指令篇.md"}'),e={name:"interview/Vue/指令篇.md"},n=t(`<h2 id="指令篇" tabindex="-1">指令篇 <a class="header-anchor" href="#指令篇" aria-label="Permalink to &quot;指令篇&quot;">​</a></h2><h3 id="v-if和v-show" tabindex="-1">v-if和v-show <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;v-if和v-show&quot;">​</a></h3><ul><li><code>v-if</code>如果值为<code>false</code>时，在生成<code>node</code>树时不会生成对应的节点，不会出现在<code>DOM</code>中</li><li><code>v-show</code>会生成节点并插入到<code>dom</code>中，只是在渲染的时候，通过<code>display:none</code>的方式隐藏了元素</li></ul><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>如果元素需要频繁的切换显示/隐藏时，使用<code>v-show</code>更加的合适</p><p><code>v-if</code>切换时性能消耗较高，<code>v-show</code>渲染效率更高</p><h3 id="v-model语法糖" tabindex="-1">v-model语法糖 <a class="header-anchor" href="#v-model语法糖" aria-label="Permalink to &quot;v-model语法糖&quot;">​</a></h3><p><code>v-model</code>是<code>Vue</code>中经常用到的一个指令了，其实它是一个语法糖，实现起来也很简单</p><p>先定义一个<code>val</code>的<code>ref</code>变量用于存放<code>input</code>框中的值，<code>input</code>元素绑定<code>input</code>事件，从事件参数从拿到<code>input</code>框中的值将其赋值到<code>val</code>中即可。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;val&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleChange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      val.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.target.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        val,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        handleChange</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>对于不同的元素，发送的事件也是不同的</p><ul><li><code>text</code>和<code>textarea</code>使用的是<code>input</code>事件和<code>value</code>属性</li><li><code>checkbox</code>和<code>radio</code>使用的是<code>change</code>事件和<code>checked</code>属性</li><li><code>select</code>使用的是<code>change</code>事件</li></ul><p><strong><a href="https://stackblitz.com/edit/vue-tr84js?file=src/App.vue" target="_blank" rel="noreferrer">onLine Demo</a></strong></p><h3 id="vue内置的指令有哪些" tabindex="-1">Vue内置的指令有哪些 <a class="header-anchor" href="#vue内置的指令有哪些" aria-label="Permalink to &quot;Vue内置的指令有哪些&quot;">​</a></h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>v-show</td><td>控制元素是否显示，原理是利用<code>display:none</code></td></tr><tr><td>v-if</td><td>控制元素是否渲染，原理是利用<code>display:none</code></td></tr><tr><td>v-html</td><td>将指定指令值作为html文本渲染到组件上，会先清空目标中的所有内容</td></tr><tr><td>v-for</td><td>通常用于遍历模板</td></tr><tr><td>v-else</td><td>配合v-if使用</td></tr><tr><td>v-else-if</td><td>配合v-if使用</td></tr><tr><td>v-on</td><td>用于绑定事件监听器，语法糖为<code>@</code></td></tr><tr><td>v-bind</td><td>用于传递属性到组件中，语法糖为<code>:</code></td></tr><tr><td>v-model</td><td>双向数据绑定</td></tr><tr><td>v-slot</td><td>用于将组件传递到具名插槽中</td></tr><tr><td>v-pre</td><td>绑定的元素不进行编译，不做如何处理</td></tr><tr><td>v-once</td><td>绑定的元素只渲染一次，后续不在更新（性能优化）</td></tr><tr><td><a href="https://cn.vuejs.org/api/built-in-directives.html#v-memo" target="_blank" rel="noreferrer">v-memo</a></td><td>缓存模板子树，应该很少用到</td></tr><tr><td>v-cloak</td><td>用于未编译完成时隐藏元素</td></tr></tbody></table><h3 id="为什么说v-for和v-if不建议一起使用" tabindex="-1">为什么说v-for和v-if不建议一起使用 <a class="header-anchor" href="#为什么说v-for和v-if不建议一起使用" aria-label="Permalink to &quot;为什么说v-for和v-if不建议一起使用&quot;">​</a></h3><p>在<code>Vue2</code>中，当遍历一个元素时，添加<code>v-if</code>指令，Vue会先将元素遍历出来，之后再通过<code>v-if</code>去推断是否渲染该元素（<strong>会触发指令、组件销毁重构</strong>），从这里看到<code>v-for</code>的优先级是高于<code>v-if</code>的</p><p>在<code>Vue3</code>中，如果这两个指令同时使用时，<code>v-if</code>比<code>v-for</code>优先级更高，注意此时<code>v-if</code>中无<strong>法访问到<code>v-for</code>作用域内定义的变量别名</strong></p><p><a href="https://cn.vuejs.org/style-guide/rules-essential.html#avoid-v-if-with-v-for" target="_blank" rel="noreferrer">风格指南 - Avoid v-if with v-for</a></p>`,19),l=[n];function h(d,p,k,r,o,c){return i(),a("div",null,l)}const v=s(e,[["render",h]]);export{g as __pageData,v as default};
