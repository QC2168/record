import{_ as e,o,c,a as d}from"./app.2cd5a615.js";const u=JSON.parse('{"title":"说说关于浏览器本地储存","description":"","frontmatter":{"title":"说说关于浏览器本地储存","tags":["Browser"]},"headers":[{"level":2,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"localStorage","slug":"localstorage","link":"#localstorage","children":[]},{"level":2,"title":"sessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[]},{"level":2,"title":"IndexDB","slug":"indexdb","link":"#indexdb","children":[]}],"relativePath":"interview/Browser/说说关于浏览器本地储存.md"}'),i={name:"interview/Browser/说说关于浏览器本地储存.md"},a=d('<h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-hidden="true">#</a></h2><p>其实在最开始，<code>cookie</code>是用来弥补<code>HTTP</code>状态管理上的不足，因为<code>HTTP</code>是无状态协议，当客户端向服务器发出请求时，服务器并无法知道对方是谁</p><p>所以就产生了<code>cookie</code>，以<code>key-value</code>的形式储存数据，在同一域名下发生请求，都会先携带<code>cookie</code>再发送给服务器端，当服务器接收数据时对<code>cookie</code>进行解析，就能获取到客户端的状态信息。</p><p>缺点：</p><ul><li><code>cookie</code>存储空间只有<code>4KB</code>，不够大</li><li>每次请求都会携带全部<code>cookie</code>数据，如果携带了不必要的数据会造成性能浪费</li><li>容易被篡改数据，如果<code>httpOnly</code>为<code>false</code>情况下，<code>js</code>可以直接读取<code>cookie</code>信息</li></ul><h2 id="localstorage" tabindex="-1">localStorage <a class="header-anchor" href="#localstorage" aria-hidden="true">#</a></h2><p><code>localStorage</code>也是通过key-value方式储存数据，数据只要不清空就不会消失，存储空间为<code>5M</code>，同一个域名下面，数据是共享的</p><p>应用场景：可以用来储存一些网站，图片数据缓存下来</p><h2 id="sessionstorage" tabindex="-1">sessionStorage <a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a></h2><p><code>sessionStorage</code>和<code>localStorage</code>基本上一样，区别在于<code>sessionStorage</code>是会话级别存储，当页面关闭之后，数据就自动清空了。</p><p>应用场景：可以用来储存当前页面中的表单数据，用户登录态</p><h2 id="indexdb" tabindex="-1">IndexDB <a class="header-anchor" href="#indexdb" aria-hidden="true">#</a></h2><p><code>IndexDB</code>是运行在浏览器中的非关系型数据库, 容量是没有限制的</p><p>特性：</p><ul><li>支付<code>事务处理</code></li><li>同源策略，每个数据库对应创建的域名，不能跨域访问</li><li>空间大，没有限制</li><li>支付二进制存储（<code>ArrayBuffer</code> 对象和 <code>Blob</code> 对象）</li></ul><p>应用场景：</p><ul><li>大屏可视化等大量数据的页面，缓存起来，减少服务器压力</li><li>聊天工具，将大量聊天信息缓存在本地</li><li>富文本内容草稿箱</li></ul>',17),l=[a];function s(r,t,n,_,h,p){return o(),c("div",null,l)}const k=e(i,[["render",s]]);export{u as __pageData,k as default};
