import{_ as i,o as e,c as t,R as s}from"./chunks/framework.sdpcv3_n.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/Vue/组件之间的通信方式有哪些.md","filePath":"interview/Vue/组件之间的通信方式有哪些.md"}'),a={name:"interview/Vue/组件之间的通信方式有哪些.md"},l=s(`<h2 id="组件之间的通信方式有哪些" tabindex="-1">组件之间的通信方式有哪些 <a class="header-anchor" href="#组件之间的通信方式有哪些" aria-label="Permalink to &quot;组件之间的通信方式有哪些&quot;">​</a></h2><h3 id="父组件向子组件传递数据" tabindex="-1">父组件向子组件传递数据 <a class="header-anchor" href="#父组件向子组件传递数据" aria-label="Permalink to &quot;父组件向子组件传递数据&quot;">​</a></h3><ul><li><code>props</code>属性传值，子组件中定义接收的<code>props</code>，父组件将对应的<code>props</code>属性写在子组件标签上即可完成传递</li><li><code>provide</code>和<code>inject</code>，通过<code>provide</code>可以向后代组件进行传递数据，后代组件需要使用<code>inject</code>接收上级组件传递过来的数据</li></ul><h3 id="子组件向父组件传递从数据" tabindex="-1">子组件向父组件传递从数据 <a class="header-anchor" href="#子组件向父组件传递从数据" aria-label="Permalink to &quot;子组件向父组件传递从数据&quot;">​</a></h3><ul><li><code>$emit</code>，子组件通过<code>emit</code>事件传递参数，父组件接收子组件传递过来的事件和参数</li></ul><h3 id="互相通讯" tabindex="-1">互相通讯 <a class="header-anchor" href="#互相通讯" aria-label="Permalink to &quot;互相通讯&quot;">​</a></h3><ul><li>事件总线（<code>Vue2</code>），<code>Vue</code>本身也可以是一个事件总线，可以发布订阅事件</li><li><code>Vuex</code>、<code>pinia</code> 通过数据共享的方式，双方组件都可以实时获取到共享数据</li></ul><h3 id="parent、children" tabindex="-1">parent、children <a class="header-anchor" href="#parent、children" aria-label="Permalink to &quot;parent、children&quot;">​</a></h3><ul><li><code>$parent</code>，通过<code>this.$parent</code>访问父级组件的实例</li><li><code>$children</code>，通过<code>children</code>让组件访问子组件实例中的属性和方法，注意访问到的数据并不是响应式数据</li></ul><h3 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h3><p>通过<code>ref</code>的方式直接获取访问子组件中的属性和方法</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意，在<code>Vue3</code>中，子组件需要定义<code>defineExpose</code>宏才能被父组件访问到</p></div><h3 id="inheritattrs" tabindex="-1">inheritAttrs <a class="header-anchor" href="#inheritattrs" aria-label="Permalink to &quot;inheritAttrs&quot;">​</a></h3><p>例如现在有一个场景是这样子的</p><p>下面<code>component</code>，就简写成<code>CMP</code>吧</p><p><code>CMP1-&gt;CMP2-&gt;CMP3</code>，如果这个时候<code>CMP1</code>要传递数据给<code>CMP3</code>，可能需要通过一层层<code>props</code>来传递（没有<code>provide</code>和<code>inject</code>的情况下），<code>Vue</code>有个<code>inheritAttrs</code>-<code>Api</code>，允许将没有被<code>props</code>解析的属性被“透传”到子组件中。而这些子组件可以通过<code>$attrs</code>进行获取</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">component1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="https://cn.vuejs.org/api/options-misc.html#inheritattrs" target="_blank" rel="noreferrer">inheritAttrs</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果是事件传递，可以通过<a href="https://v2.cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noreferrer"><code>$listeners</code></a>将接收到的事件传递到子组件中</p></div>`,19),o=[l];function n(c,d,r,h,p,k){return e(),t("div",null,o)}const g=i(a,[["render",n]]);export{u as __pageData,g as default};
