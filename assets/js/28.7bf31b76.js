(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{606:function(v,_,e){"use strict";e.r(_);var t=e(17),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h3",{attrs:{id:"浏览器缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[v._v("#")]),v._v(" 浏览器缓存机制")]),v._v(" "),e("p",[v._v("我们都知道当我们在浏览器中打开一个页面时，浏览器会根据你输入的URL到对应的服务器上请求你想要的数据资源。但这个过程中可能页面可能需要等待一段时间（白屏时间）才能渲染到你的页面中。")]),v._v(" "),e("p",[v._v("当你想要提高用户体验时，那就不得不提各种缓存技术了，例如：DNS缓存、CDN缓存。浏览器缓存、页面本地缓存等等，有一个良好的缓存策略可以减低重复资源的请求，降低服务器的开销，提高用户页面的加载速度。")]),v._v(" "),e("p",[v._v("而这一篇文章将聊聊什么的"),e("code",[v._v("HTTP")]),v._v("强缓存和协商缓存")]),v._v(" "),e("h3",{attrs:{id:"基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本原理"}},[v._v("#")]),v._v(" 基本原理")]),v._v(" "),e("p",[v._v("在浏览器加载资源的时候，首先会根据请求头的"),e("code",[v._v("expires")]),v._v("和"),e("code",[v._v("cache-control")]),v._v("判断是否命中强缓存策略，判断是否向远程服务器请求资源还是去本地获取缓存资源。")]),v._v(" "),e("h3",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),e("p",[v._v("在浏览器中，强缓存分为"),e("code",[v._v("Expires")]),v._v("（http1.0规范）、"),e("code",[v._v("cache-control")]),v._v("（http1.1规范）两种。")]),v._v(" "),e("h4",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),e("p",[e("code",[v._v("Expires")]),v._v("是"),e("code",[v._v("http1.0")]),v._v("的规范，用于表示资源的过期时间的请求头字段，值是一个绝对时间，是由服务器端返回的。")]),v._v(" "),e("p",[v._v("在浏览器第一个请求资源时，服务器端的响应头会附上"),e("code",[v._v("Expires")]),v._v("这个响应字段，当浏览器在下一次请求这个资源时会根据上次的"),e("code",[v._v("expires")]),v._v("字段是否使用缓存资源（当请求时间小于服务端返回的到期时间，直接使用缓存数据）")]),v._v(" "),e("blockquote",[e("p",[v._v("expires是根据本地时间来判断的，假设客户端和服务器时间不同，会导致缓存命中误差")])]),v._v(" "),e("h4",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-control")]),v._v(" "),e("p",[v._v("上面我们提到了"),e("code",[v._v("Expires")]),v._v("有个缺点，当客户端本地时间被修改时浏览器会直接向服务器请求新的资源，为了解决这个问题，在"),e("code",[v._v("http1.1")]),v._v("规范中，提出了"),e("code",[v._v("cache-control")]),v._v("字段，且"),e("strong",[v._v("这个字段优先级高于上面提到的"),e("code",[v._v("Expires")])]),v._v("，值是相对时间。")]),v._v(" "),e("p",[v._v("在"),e("code",[v._v("cache-control")]),v._v("中有常见的几个响应属性值，它们分别是")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("属性值")]),v._v(" "),e("th",[v._v("值")]),v._v(" "),e("th",[v._v("备注")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("max-age")]),v._v(" "),e("td",[v._v("3600")]),v._v(" "),e("td",[v._v("例如值为3600，表示（当前时间+3600秒）内不与服务器请求新的数据资源")])]),v._v(" "),e("tr",[e("td",[v._v("s-maxage")]),v._v(" "),e("td"),v._v(" "),e("td",[v._v("和max-age一样，但这个是设定代理服务器的缓存时间")])]),v._v(" "),e("tr",[e("td",[v._v("private")]),v._v(" "),e("td"),v._v(" "),e("td",[v._v("内容只缓存到私有缓存中(仅客户端可以缓存，代理服务器不可缓存)")])]),v._v(" "),e("tr",[e("td",[v._v("public")]),v._v(" "),e("td"),v._v(" "),e("td",[v._v("所有内容都将被缓存(客户端和代理服务器都可缓存)")])]),v._v(" "),e("tr",[e("td",[v._v("no-store")]),v._v(" "),e("td"),v._v(" "),e("td",[v._v("缓存只能被客户端浏览器缓存，不能被代理服务器缓存")])]),v._v(" "),e("tr",[e("td",[v._v("no-cache")]),v._v(" "),e("td"),v._v(" "),e("td",[v._v("储存在本地缓存区中，只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用")])])])]),v._v(" "),e("h3",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),e("p",[v._v("上面提到的强缓存都是由本地浏览器在确定是否使用缓存，当浏览器没有命中强缓存时就会向浏览器发送请求，验证协商缓存是否命中，如果缓存命中则返回304状态码，否则返回新的资源数据。")]),v._v(" "),e("p",[v._v("协商缓存（也叫对比缓存）是由服务器来确定资源是否可用，这将涉及到两组字段成对出现的，在浏览器第一次发出请求时会带上字段（Last-Modified或者"),e("code",[v._v("Etag")]),v._v("），则后续请求则会带上对于的请求字段（"),e("code",[v._v("if-modified-since")]),v._v("或者"),e("code",[v._v("if-none-Match")]),v._v("），若响应头没有"),e("code",[v._v("Last-Modified")]),v._v("或者"),e("code",[v._v("Etag")]),v._v("，则请求头也不会有对应的字段")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Last-modified")]),v._v("表示本地文件最后修改时间，由服务器返回")]),v._v(" "),e("li",[e("code",[v._v("if-modified-since")]),v._v("是浏览器在请求数据时返回的，值是上次浏览器返回的Last-modified")]),v._v(" "),e("li",[e("code",[v._v("ETag")]),v._v("是一个文件的唯一标识符，当资源发生变化时这个"),e("code",[v._v("ETag")]),v._v("就会发生变化。弥补了上面"),e("code",[v._v("last-modified")]),v._v("可能出现文件内容没有变化但是"),e("code",[v._v("last-modified")]),v._v("发生了变化出现重新向服务器请求资源情况。这个值也是又服务器返回的")]),v._v(" "),e("li",[e("code",[v._v("if-none-match")]),v._v("是浏览器请求数据时带上的字段，值是上次服务器返回的"),e("code",[v._v("ETag")])])]),v._v(" "),e("p",[v._v("这么说可能不太明白，我画了一个请求流程图，看一下就很快可以明白什么是协商缓存啦")]),v._v(" "),e("p",[v._v("![Untitled Diagram (1)](C:/Users/ABC/Downloads/Untitled Diagram (1).png)")]),v._v(" "),e("h4",{attrs:{id:"结合强缓存具体请求流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结合强缓存具体请求流程"}},[v._v("#")]),v._v(" 结合强缓存具体请求流程")]),v._v(" "),e("ol",[e("li",[v._v("当浏览器发起一个资源请求时，浏览器会先判断本地是否有缓存记录，如果没有会向浏览器请求新的资源，并记录服务器返回的"),e("code",[v._v("last-modified")]),v._v("。")]),v._v(" "),e("li",[v._v("如果有缓存记录，先判断强缓存是否存在（"),e("code",[v._v("cache-control")]),v._v("优先于"),e("code",[v._v("expires")]),v._v("，后面会说），如果强缓存的时间没有过期则返回本地缓存资源（状态码为200）")]),v._v(" "),e("li",[v._v("如果强缓存失效了，客户端会发起请求进行协商缓存策略，首先服务器判断"),e("code",[v._v("Etag")]),v._v("标识符，如果客户端传来标识符和当前服务器上的标识符是一致的，则返回状态码 "),e("code",[v._v("304 not modified")]),v._v("（不会返回资源内容）")]),v._v(" "),e("li",[v._v("如果没有"),e("code",[v._v("Etag")]),v._v("字段，服务器会对比客户端传过来的"),e("code",[v._v("if-modified-match")]),v._v("，如果这两个值是一致的，此时响应头不会带有"),e("code",[v._v("last-modified")]),v._v("字段（因为资源没有变化，"),e("code",[v._v("last-modified")]),v._v("的值也不会有变化）。客户端304状态码之后读取本地缓存。如果"),e("code",[v._v("last-modified")]),v._v("。")]),v._v(" "),e("li",[v._v("如果"),e("code",[v._v("Etag")]),v._v("和服务器端上的不一致，重新获取新的资源，并进行协商缓存返回数据。")])]),v._v(" "),e("h4",{attrs:{id:"为什么需要etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要etag"}},[v._v("#")]),v._v(" 为什么需要ETag")]),v._v(" "),e("p",[v._v("它的出现主要是解决"),e("code",[v._v("last-modified")]),v._v("几个比较难以解决的问题")]),v._v(" "),e("ol",[e("li",[v._v("在没有修改文件内容情况下文件的最后修改时间可能也会改变，这会导致客户端认为这文件被改动了，从而重新请求")]),v._v(" "),e("li",[v._v("可能有些文件修改比较频繁，秒级以内修改的，"),e("code",[v._v("If-Modified-Since")]),v._v(" 能检查到的粒度是秒级的，使用 "),e("code",[v._v("Etag")]),v._v(" 就能够保证这种需求下客户端在 1 秒内能刷新多次。")]),v._v(" "),e("li",[v._v("有些服务器不能精确获取文件的最后修改时间")])]),v._v(" "),e("h3",{attrs:{id:"状态码区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码区别"}},[v._v("#")]),v._v(" 状态码区别")]),v._v(" "),e("ul",[e("li",[v._v("200 请求成功，服务器返回全新的数据")]),v._v(" "),e("li",[v._v("200 "),e("code",[v._v("from memory cache / from disk cache")]),v._v(" 本地强缓存还在有效期，直接使用本地缓存")]),v._v(" "),e("li",[v._v("304 请求成功，走了协商缓存，服务器判定（"),e("code",[v._v("Etag")]),v._v("和"),e("code",[v._v("Last-modified")]),v._v("）没有过期，告知浏览器使用缓存")])]),v._v(" "),e("blockquote",[e("p",[v._v("from memory cache 是页面刷新的时候内存取的\nfrom disk cache 页面tab关闭后从磁盘取的")])]),v._v(" "),e("h3",{attrs:{id:"缓存优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存优先级"}},[v._v("#")]),v._v(" 缓存优先级")]),v._v(" "),e("p",[e("code",[v._v("expires")]),v._v("和"),e("code",[v._v("cache-control")]),v._v("如果同时存在时，"),e("code",[v._v("cache-control")]),v._v("会覆盖"),e("code",[v._v("expires")]),v._v("，"),e("code",[v._v("expires")]),v._v("无效，无论是否过期，。即 "),e("code",[v._v("Cache-control > expires")])]),v._v(" "),e("p",[v._v("强缓存和协商缓存如果同时存在时，会去先对比强缓存是否还再有效期，如果强缓存生效则对比协商缓存，即"),e("code",[v._v("强缓存 > 协商缓存")])]),v._v(" "),e("p",[v._v("协商缓存"),e("code",[v._v("Etag")]),v._v("和"),e("code",[v._v("last-modified")]),v._v("同时存在时，会先比较"),e("code",[v._v("Etag")]),v._v("，"),e("code",[v._v("last-modified")]),v._v("无效，即"),e("code",[v._v("Etag > last-modified")])]),v._v(" "),e("blockquote",[e("p",[v._v("补充一下：")]),v._v(" "),e("p",[v._v("在http1.0规范时还有一个"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Pragma",target:"_blank",rel:"noopener noreferrer"}},[v._v("Pragma"),e("OutboundLink")],1),v._v("缓存策略，那时候Cache-control（http1.1）还没出，它与 Cache-Control: no-cache 效果一致。强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证")])]),v._v(" "),e("blockquote",[e("p",[v._v("paragma -> Cache-control -> expires -> Etag -> last-modified")])]),v._v(" "),e("h3",{attrs:{id:"启发式缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存"}},[v._v("#")]),v._v(" 启发式缓存")]),v._v(" "),e("p",[v._v("这个会缓存策略是浏览器默认的，如果发送一个网络请求没有"),e("code",[v._v("expires")]),v._v("、"),e("code",[v._v("cache-control")]),v._v("，但是又有"),e("code",[v._v("last-modified")]),v._v("字段，那么在这种情况下浏览器会有一个默认缓存策略"),e("code",[v._v("（currentTime - last-modified ）*0.1")])]),v._v(" "),e("blockquote",[e("p",[v._v("只有服务端没有返回明确的缓存策略时才会激活浏览器的启发式缓存策略")])]),v._v(" "),e("p",[e("a",{attrs:{href:"https://paulcalvano.com/2018-03-14-http-heuristic-caching-missing-cache-control-and-expires-headers-explained/",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP Heuristic Caching (Missing Cache-Control and Expires Headers) Explained"),e("OutboundLink")],1)]),v._v(" "),e("h3",{attrs:{id:"其他补充"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他补充"}},[v._v("#")]),v._v(" 其他补充")]),v._v(" "),e("ul",[e("li",[v._v("协商缓存想要配合强缓存使用，如果不开启强缓存使用，协商缓存没有意义")]),v._v(" "),e("li",[v._v("大部分"),e("code",[v._v("web")]),v._v("服务器默认开启协商缓存，且是同时开启"),e("code",[v._v("last-modified")]),v._v("和"),e("code",[v._v("Etag")])])]),v._v(" "),e("h3",{attrs:{id:"注意场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意场景"}},[v._v("#")]),v._v(" 注意场景")]),v._v(" "),e("ol",[e("li",[v._v("分布式系统里"),e("code",[v._v("last-modified")]),v._v("需要保持一致，以免负载到不同的机器导致比对失败，从而返回新资源")]),v._v(" "),e("li",[v._v("分布式系统尽量关闭掉"),e("code",[v._v("Etag")]),v._v("，因为每一台服务器生成的"),e("code",[v._v("Etag")]),v._v("是不同的")])])])}),[],!1,null,null,null);_.default=a.exports}}]);