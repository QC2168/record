(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{614:function(a,t,s){"use strict";s.r(t);var e=s(17),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"eval和new-functioin的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval和new-functioin的区别"}},[a._v("#")]),a._v(" eval和new functioin的区别")]),a._v(" "),s("h2",{attrs:{id:"eval"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval"}},[a._v("#")]),a._v(" eval")]),a._v(" "),s("p",[a._v("相信很多同学都知道eval函数，它是将一个字符串转化为JavaScript表达式的函数。")]),a._v(" "),s("h3",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[a._v("#")]),a._v(" 问题")]),a._v(" "),s("p",[a._v("但在日常开发中，切记不要使用eval函数，一旦eval函数中传入的代码是被篡改的，攻击者可以窃取当前环境下的数据。\n使用eval函数也会让代码的可读性变得很差\n性能差，在现代js引擎会对代码进行优化，如果使用eval的函数会破坏这个过程，js引擎将无法对eval函数中的值进行优化。")]),a._v(" "),s("h3",{attrs:{id:"eval用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval用法"}},[a._v("#")]),a._v(" eval用法")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'1+1+2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4")]),a._v("\n")])])]),s("h3",{attrs:{id:"eval作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval作用域"}},[a._v("#")]),a._v(" eval作用域")]),a._v(" "),s("h2",{attrs:{id:"function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[a._v("#")]),a._v(" function")])])}),[],!1,null,null,null);t.default=n.exports}}]);