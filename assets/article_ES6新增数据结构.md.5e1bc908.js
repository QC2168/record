import{_ as s,o as a,c as n,a as l}from"./app.eaa13302.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"ES6新增数据结构","slug":"es6新增数据结构","link":"#es6新增数据结构","children":[]},{"level":2,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]},{"level":2,"title":"symbol作为key","slug":"symbol作为key","link":"#symbol作为key","children":[]},{"level":2,"title":"通过symbol获取对应的值","slug":"通过symbol获取对应的值","link":"#通过symbol获取对应的值","children":[]},{"level":2,"title":"遍历symbol","slug":"遍历symbol","link":"#遍历symbol","children":[]},{"level":2,"title":"全局symbol对象注册","slug":"全局symbol对象注册","link":"#全局symbol对象注册","children":[]},{"level":2,"title":"Symbol.for","slug":"symbol-for","link":"#symbol-for","children":[]},{"level":2,"title":"Symbol.keyFor","slug":"symbol-keyfor","link":"#symbol-keyfor","children":[]},{"level":2,"title":"Set","slug":"set","link":"#set","children":[]},{"level":2,"title":"Set常用方法","slug":"set常用方法","link":"#set常用方法","children":[]},{"level":2,"title":"WeakSet","slug":"weakset","link":"#weakset","children":[]},{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"WeakSet常用方法","slug":"weakset常用方法","link":"#weakset常用方法","children":[]},{"level":2,"title":"关于遍历","slug":"关于遍历","link":"#关于遍历","children":[]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[]},{"level":2,"title":"Map常用方法","slug":"map常用方法","link":"#map常用方法","children":[]},{"level":2,"title":"遍历Map","slug":"遍历map","link":"#遍历map","children":[]},{"level":2,"title":"WeakMap","slug":"weakmap","link":"#weakmap","children":[]},{"level":2,"title":"基本使用","slug":"基本使用-1","link":"#基本使用-1","children":[]},{"level":2,"title":"WeakMap常用方法","slug":"weakmap常用方法","link":"#weakmap常用方法","children":[]},{"level":2,"title":"关于遍历","slug":"关于遍历-1","link":"#关于遍历-1","children":[]}],"relativePath":"article/ES6新增数据结构.md"}'),o={name:"article/ES6新增数据结构.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>下面我们聊一聊在<code>ES6</code>中新增的数据结构有哪些，它们是如何使用的。</p><h2 id="es6新增数据结构" tabindex="-1">ES6新增数据结构 <a class="header-anchor" href="#es6新增数据结构" aria-hidden="true">#</a></h2><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h2><p><code>Symbol</code>是<code>ES6</code>中新增的一个基本数据类型之一，它是一个函数。每一个从<code>Symbol</code>函数返回的<code>Symbol</code>值都是独一无二的，<code>symbol</code>值作为对象属性的标识符，也是唯一的用途的。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(s1 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> s2)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre></div><h2 id="symbol作为key" tabindex="-1">symbol作为key <a class="header-anchor" href="#symbol作为key" aria-hidden="true">#</a></h2><p>第一种方式，直接在对象的字面量中添加。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// symbol作为key</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">s1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">s2</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>第二种方式，通过添加数组方式添加。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 需要用数组方式来获取，不能通过点语法，否则会获取到字符串key</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj[s1])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>第三种方式，通过对象中的<code>defineProperty</code>方法添加。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">s4</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ff</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="通过symbol获取对应的值" tabindex="-1">通过symbol获取对应的值 <a class="header-anchor" href="#通过symbol获取对应的值" aria-hidden="true">#</a></h2><p>需要用数组方式来获取，不能通过点语法，否则会获取到字符串<code>key</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj[s1])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>symbol</code>不能被隐式转换成<code>string</code>类型。</p><blockquote><p>注意：Symbol函数中的参数是symbol描述符，这是在ES10新增的</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> Sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Sym</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(Sym)  </span><span style="color:#676E95;font-style:italic;">// TypeError: Cannot convert a Symbol value to a string</span></span>
<span class="line"></span></code></pre></div><p>我们不能直接<code>alert</code>一个<code>symbol</code>对象，但是我们可以通过<code>toString</code>的方式或者<code>.description</code>来获取<code>symbol</code>对象的描述符。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(sym</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">description)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;a&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="遍历symbol" tabindex="-1">遍历symbol <a class="header-anchor" href="#遍历symbol" aria-hidden="true">#</a></h2><p>在使用<code>for</code>遍历、<code>object.keys</code>中是获取不到<code>symbol</code>健的，对此<code>object</code>还提供了<code>getOwnPropertySymbols</code>方法，用于获取对象中所有symbol的key。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sKeys</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertySymbols</span><span style="color:#A6ACCD;">(obj))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> skey </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> sKeys)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">skey</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="全局symbol对象注册" tabindex="-1">全局symbol对象注册 <a class="header-anchor" href="#全局symbol对象注册" aria-hidden="true">#</a></h2><p>有时，我们可能需要多个<code>symbol</code>的值是一致的，我们可以通过<code>symbol</code>提供的静态方法<code>for</code>方法传入一样的描述符来使它们的值一致。</p><h2 id="symbol-for" tabindex="-1">Symbol.for <a class="header-anchor" href="#symbol-for" aria-hidden="true">#</a></h2><p>该方法会在使用给定键搜索运行时符号注册表中的现有符号，并在找到时返回它。否则，使用此键在全局符号注册表中创建一个新符号。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sa</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sb</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(sa</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">sb)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span></code></pre></div><h2 id="symbol-keyfor" tabindex="-1">Symbol.keyFor <a class="header-anchor" href="#symbol-keyfor" aria-hidden="true">#</a></h2><p>该方法用于获取全局<code>symbol</code>的描述符。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keyFor</span><span style="color:#A6ACCD;">(sb)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(key)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// c</span></span>
<span class="line"></span></code></pre></div><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-hidden="true">#</a></h2><p><code>Set</code>对象（类似数组）允许你存放任何数据类型，但里面的值不能重复。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">40</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(s1) </span><span style="color:#676E95;font-style:italic;">// Set(4) { 10, 20, 30, 40 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(s1) </span><span style="color:#676E95;font-style:italic;">// Set(4) { 10, 20, 30, 40 }</span></span>
<span class="line"></span></code></pre></div><h2 id="set常用方法" tabindex="-1">Set常用方法 <a class="header-anchor" href="#set常用方法" aria-hidden="true">#</a></h2><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>size</code></td><td><code>set</code>对象中的数量</td><td>返回set对象中的数量</td></tr><tr><td><code>add</code></td><td><code>Set</code>对象</td><td>添加元素</td></tr><tr><td><code>delete</code></td><td><code>boolean</code></td><td>删除元素</td></tr><tr><td><code>has</code></td><td><code>boolean</code></td><td><code>Set</code>对象中是否存在这个值</td></tr><tr><td><code>clear</code></td><td>无</td><td>清空<code>Set</code>对象中的值</td></tr></tbody></table><h2 id="weakset" tabindex="-1">WeakSet <a class="header-anchor" href="#weakset" aria-hidden="true">#</a></h2><p><code>WeakSet</code>是类似<code>Set</code>的另外一种数据结构，内部数据也不能有重复值。</p><ul><li>它与<code>Set</code>的区别 <ul><li><code>WeakSet</code>只能存放对象类型，不能存放基本数据类型</li><li><code>WeakSet</code>对元素是弱引用</li></ul></li></ul><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> weakSet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakSet</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">weakSet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="weakset常用方法" tabindex="-1">WeakSet常用方法 <a class="header-anchor" href="#weakset常用方法" aria-hidden="true">#</a></h2><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>add</code></td><td><code>weakset</code>对象</td><td>添加元素</td></tr><tr><td><code>delete</code></td><td><code>boolean</code></td><td>删除元素</td></tr><tr><td><code>has</code></td><td><code>boolean</code></td><td><code>weakset</code>对象中是否存在这个值</td></tr></tbody></table><h2 id="关于遍历" tabindex="-1">关于遍历 <a class="header-anchor" href="#关于遍历" aria-hidden="true">#</a></h2><p><code>WeakSet</code>不能被遍历，因为它只是对对象进行弱引用，如果遍历去获取元素，有可能导致对象不能被<code>GC</code>回收。</p><p>所以<code>WeakSet</code>中的对象是不能获取的</p><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-hidden="true">#</a></h2><p><code>ES6</code>新增的数据结构，用于存储映射关系。我们知道在<code>JavaScript</code>中对象中是不能用对象来作为<code>key</code>的。（假如我们把对象作为<code>key</code>，其内部会将对象转换为字符串<code>[object object]</code>）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">QC2125</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj3</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">obj1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">obj2</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj3)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { &#39;[object Object]&#39;: &#39;b&#39; }</span></span>
<span class="line"></span></code></pre></div><p>而<code>Map</code>则可以把对象作为<code>key</code>进行存储，可以通过<code>set</code>方法添加到<code>Map</code>中，也直接通过字面量的方式添加。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_island</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">QC2125</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(map)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Map(2) { { name: &#39;_island&#39; } =&gt; &#39;a&#39;, { name: &#39;QC2125&#39; } =&gt; &#39;b&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([[obj1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[obj2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]])</span></span>
<span class="line"></span></code></pre></div><h2 id="map常用方法" tabindex="-1">Map常用方法 <a class="header-anchor" href="#map常用方法" aria-hidden="true">#</a></h2><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>get</code></td><td>获取对应的元素</td><td>通过<code>key</code>获取对应元素</td></tr><tr><td><code>size</code></td><td><code>Map</code>对象中的数量</td><td>返回<code>Map</code>对象中的数量</td></tr><tr><td><code>set</code></td><td><code>Map</code>对象</td><td>添加元素</td></tr><tr><td><code>delete</code></td><td><code>boolean</code></td><td>删除元素</td></tr><tr><td><code>has</code></td><td><code>boolean</code></td><td><code>Set</code>对象中是否存在这个值</td></tr><tr><td><code>clear</code></td><td>无</td><td>清空<code>Set</code>对象中的值</td></tr></tbody></table><h2 id="遍历map" tabindex="-1">遍历Map <a class="header-anchor" href="#遍历map" aria-hidden="true">#</a></h2><p>通过<code>foreach</code>语句遍历<code>Map</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">map2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(item))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>通过<code>for..of</code>遍历<code>Map</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> ([val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key] </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> map2) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">---</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-hidden="true">#</a></h2><p>和<code>Map</code>类似，也是以键值对的形式存在的</p><ul><li>和Map的区别 <ul><li><code>WeakMap</code>的<code>key</code>只能使用对象，不接受其他的类型作为<code>key</code></li><li><code>WeakMap</code>的<code>key</code>对对象是弱引用</li></ul></li></ul><h2 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> weakMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">weakMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(weakMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(obj))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// a</span></span>
<span class="line"></span></code></pre></div><h2 id="weakmap常用方法" tabindex="-1">WeakMap常用方法 <a class="header-anchor" href="#weakmap常用方法" aria-hidden="true">#</a></h2><table><thead><tr><th>方法</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td><code>get</code></td><td><code>weakmap</code>对象</td><td>获取元素</td></tr><tr><td><code>delete</code></td><td><code>boolean</code></td><td>删除元素</td></tr><tr><td><code>has</code></td><td><code>boolean</code></td><td><code>weaksmap</code>对象中是否存在这个值</td></tr></tbody></table><h2 id="关于遍历-1" tabindex="-1">关于遍历 <a class="header-anchor" href="#关于遍历-1" aria-hidden="true">#</a></h2><p>和<code>WeakSet</code>一样，正因为它是弱引用，<code>WeakMap</code>的<code>key</code>是不可枚举的，如果<code>key</code>可枚举那其列表将会受<code>GC</code>影响。</p>`,68),p=[e];function t(c,r,y,d,D,i){return a(),n("div",null,p)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
