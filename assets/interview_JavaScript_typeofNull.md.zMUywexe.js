import{_ as t,o as a,c as e,R as i}from"./chunks/framework.sdpcv3_n.js";const g=JSON.parse('{"title":"typeofNull","description":"","frontmatter":{"title":"typeofNull","tags":["JavaScript"]},"headers":[],"relativePath":"interview/JavaScript/typeofNull.md","filePath":"interview/JavaScript/typeofNull.md"}'),s={name:"interview/JavaScript/typeofNull.md"},l=i('<h2 id="typeof-null" tabindex="-1">typeof null <a class="header-anchor" href="#typeof-null" aria-label="Permalink to &quot;typeof null&quot;">​</a></h2><p>先说结果，是<code>Object</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // object</span></span></code></pre></div><h3 id="历史上的bug" tabindex="-1">历史上的BUG <a class="header-anchor" href="#历史上的bug" aria-label="Permalink to &quot;历史上的BUG&quot;">​</a></h3><p>这是<code>JavaScript</code>中的是一个<code>Bug</code></p><p>在第一个版本的时候，所有值都储存在32位的单元中，每个单元包含一个小的类型标签（占<code>1-3bits</code>），剩下的位表示真实值。</p><table><thead><tr><th>值</th><th>类型</th></tr></thead><tbody><tr><td>000</td><td>Object</td></tr><tr><td>001</td><td>int</td></tr><tr><td>010</td><td>float</td></tr><tr><td>100</td><td>string</td></tr><tr><td>110</td><td>boolean</td></tr></tbody></table><p><strong>null是机器码，引用了一个空的对象，标记为0，最终类型是Object</strong></p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230203165743.png" alt="20230203165743"></p><h3 id="曾经有个将null的提案" tabindex="-1">曾经有个将null的提案... <a class="header-anchor" href="#曾经有个将null的提案" aria-label="Permalink to &quot;曾经有个将null的提案...&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;null&#39;</span></span></code></pre></div><p><a href="https://web.archive.org/web/20160331031419/http://wiki.ecmascript.org:80/doku.php?id=harmony:typeof_null" target="_blank" rel="noreferrer">历史讨论快照</a></p><h3 id="判断是否null" tabindex="-1">判断是否null <a class="header-anchor" href="#判断是否null" aria-label="Permalink to &quot;判断是否null&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [object Null]</span></span></code></pre></div><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noreferrer">The history of “typeof null”</a></li><li><a href="https://262.ecma-international.org/5.1/#sec-11.4.3" target="_blank" rel="noreferrer">The typeof Operator</a></li></ul>',16),n=[l];function r(h,p,o,d,c,k){return a(),e("div",null,n)}const y=t(s,[["render",r]]);export{g as __pageData,y as default};
