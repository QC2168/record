import{_ as a,o as e,c as s,R as t}from"./chunks/framework.sdpcv3_n.js";const u=JSON.parse('{"title":"PNPM-更快更好包管理工具","description":"","frontmatter":{"title":"PNPM-更快更好包管理工具","tags":["other"]},"headers":[],"relativePath":"article/PNPM-更快更好包管理工具.md","filePath":"article/PNPM-更快更好包管理工具.md"}'),p={name:"article/PNPM-更快更好包管理工具.md"},i=t(`<h2 id="什么是pnpm" tabindex="-1">什么是pnpm <a class="header-anchor" href="#什么是pnpm" aria-label="Permalink to &quot;什么是pnpm&quot;">​</a></h2><p><code>pnpm</code> 名字的由来是<code>performant</code>+<code>pnpm</code>，由<code>rstacruz</code>提出的这个名字。</p><p><code>pnpm</code>是一款<code>node.js</code>软件包管理工具，它是<code>npm</code>、<code>yarn</code>的替代品，在它的官网上有这么一句话。</p><blockquote><p>Saving disk space and boosting installation speed</p><p>节约磁盘空间并提升安装速度</p></blockquote><p><img src="https://pnpm.io/assets/images/cafs-illustration-7be6bd97e43ba11a031b099869321deb.jpg" alt="img"></p><p>下面配了这一张图，从图中的含义我们可以看到用<code>pnpm</code>包管理工具可以帮你把所有项目的依赖包安装到一个全局存储位置，之后项目执行安装依赖时则会向这个全局存储位置中查询是否有这个依赖（没有则下载安装），并在项目目录下的<code>node_modules</code>创建一个硬链接连接到全局存储位置。从而达到节省硬盘空间和下载依赖的时间。</p><ul><li>注意：假设你的项目某个依赖包有不同的版本，例如<code>&quot;axios&quot;: &quot;^0.21.1&quot;,</code>和<code>&quot;axios&quot;: &quot;^0.24.0&quot;</code>时，那么<code>pnpm</code>会帮你处理这个问题，把这两个依赖包有差异的文件添加到仓库中，而不会因为一个文件的改动从而重新复制/下载另外一个版本的包。</li></ul><p>下面这种图比较了 <code>npm</code>、<code>pnpm</code>、Yarn Classic 和 <code>Yarn PnP</code> 的性能，对应的<a href="https://github.com/pnpm/pnpm.github.io/blob/main/benchmarks/fixtures/alotta-files/package.json" target="_blank" rel="noreferrer"><code>package,json</code></a>文件。</p><p><img src="https://camo.githubusercontent.com/83b108abddef5c40f6afc985fa8214edc92b6f2226a83d577074a720907463c8/68747470733a2f2f706e706d2e696f2f696d672f62656e63686d61726b732f616c6f7474612d66696c65732e737667" alt="img"></p><p>至今，<code>pnpm</code>在<code>GitHub</code>上已经高达14.8K<code>star</code>。</p><h2 id="安装pnpm" tabindex="-1">安装pnpm <a class="header-anchor" href="#安装pnpm" aria-label="Permalink to &quot;安装pnpm&quot;">​</a></h2><p>使用<code>npm</code>安装<code>pnpm</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><p>使用<code>npx</code>安装<code>pnpm</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p><code>pnpm</code>的用法和<code>npm</code>、<code>yarn</code>是类似的，这使得我们可以很快的上手<code>pnpm</code></p><table><thead><tr><th>npm命令</th><th>yarn命令</th><th>pnpm命令</th></tr></thead><tbody><tr><td>npm install</td><td>yarn</td><td>pnpm install</td></tr><tr><td>npm i [pkg]</td><td>yarn add [pkg]</td><td>pnpm add [pkg]</td></tr><tr><td>npm run [cmd]</td><td>yarn run [cmd]</td><td>pnpm [cmd]</td></tr></tbody></table><h2 id="全局安装位置" tabindex="-1">全局安装位置 <a class="header-anchor" href="#全局安装位置" aria-label="Permalink to &quot;全局安装位置&quot;">​</a></h2><p>从上面我们得知pnpm是通过创建硬链接的方式来连接全局存储中的依赖，我们知道硬链接是不能跨越文件系统的，这是硬链接工作方式带来的限制。如果你需要跨文件系统来使用pnpm，也即是全局存储位置与项目依赖包安装位置不处于同一文件系统上，包则会被复制，不被硬链接。</p><p>默认情况下，全局存储的路径是不会被指定的，但没有指定全局存储位置时，当你在当前项目中<code>pnpm install</code>时，依赖会自动被创建上当前文件系统根目录下的<code>.pnpm-store</code>。但这有一个缺点，每个2驱动器可能会有冗余的依赖包。</p><h2 id="指定全局依赖位置" tabindex="-1">指定全局依赖位置 <a class="header-anchor" href="#指定全局依赖位置" aria-label="Permalink to &quot;指定全局依赖位置&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/.pnpm-store</span></span></code></pre></div><h2 id="删除全局存储内容" tabindex="-1">删除全局存储内容 <a class="header-anchor" href="#删除全局存储内容" aria-label="Permalink to &quot;删除全局存储内容&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.pnpm-store</span></span></code></pre></div><blockquote><p>如果您在非主磁盘中使用 <code>pnpm</code>，则存储位于该磁盘的根目录中。 例如，如果您 <code>D:</code> 上使用 <code>pnpm</code>，请从 <code>D:\\.pnpm-store</code>删除存储。</p></blockquote><h2 id="只允许使用pnpm" tabindex="-1">只允许使用pnpm <a class="header-anchor" href="#只允许使用pnpm" aria-label="Permalink to &quot;只允许使用pnpm&quot;">​</a></h2><p>如果你想要你的项目不被其他人意外使用<code>npm</code>、<code>yarn</code>安装依赖包时，你需要在<code>package.json</code>添加这个<code>preinstall</code>脚本。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx only-allow pnpm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><code>pnpm</code>是一个比<code>npm</code>、<code>yarn</code>更高效的管理工具</li><li><code>pnpm</code>采用了硬链接的方式，这比<code>yarn</code>复制本地缓存文件更快，且高效利用磁盘空间</li></ul>`,31),n=[i];function o(d,c,l,h,r,k){return e(),s("div",null,n)}const g=a(p,[["render",o]]);export{u as __pageData,g as default};
