import{_ as e,c as i,o as l,a}from"./app.b9c86669.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"如何优化CSS","slug":"如何优化css","link":"#如何优化css","children":[{"level":3,"title":"载入时优化","slug":"载入时优化","link":"#载入时优化","children":[]},{"level":3,"title":"选择器优化","slug":"选择器优化","link":"#选择器优化","children":[]},{"level":3,"title":"属性使用","slug":"属性使用","link":"#属性使用","children":[]},{"level":3,"title":"渲染性能","slug":"渲染性能","link":"#渲染性能","children":[]},{"level":3,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}]}],"relativePath":"interview/CSS/如何优化CSS.md"}'),c={name:"interview/CSS/如何优化CSS.md"},d=a('<h2 id="如何优化css" tabindex="-1">如何优化CSS <a class="header-anchor" href="#如何优化css" aria-hidden="true">#</a></h2><h3 id="载入时优化" tabindex="-1">载入时优化 <a class="header-anchor" href="#载入时优化" aria-hidden="true">#</a></h3><ul><li>CSS压缩，常见的<code>webpack</code>、<code>vite</code>会都把<code>CSS</code>进行压缩处理</li><li>单一样式：<code>margin-top:20px</code>比<code>margin:20px 0 0 0;</code>更高效</li><li>使用<code>rel=preload</code>，异步加载资源</li><li>不要使用<code>@import</code>，会影响浏览器并行下载，而且多个<code>@import</code>会导致下载顺序错乱，建议使用<code>link</code>标签</li></ul><h3 id="选择器优化" tabindex="-1">选择器优化 <a class="header-anchor" href="#选择器优化" aria-hidden="true">#</a></h3><ul><li>尽量减少选择器多层嵌套（后代选择器），因为浏览器在生成渲染树的时候会花费更多时间</li><li>避免使用<code>*{}</code>选择器</li></ul><h3 id="属性使用" tabindex="-1">属性使用 <a class="header-anchor" href="#属性使用" aria-hidden="true">#</a></h3><ul><li>尽量避免使用昂贵的属性，例如<code>shadow</code>、<code>filter</code>、<code>opacity</code>、<code>float</code>、<code>position</code></li></ul><div class="tip custom-block"><p class="custom-block-title">为什么CSS选择器是从右开始匹配的</p><p>因为性能问题，从右开始匹配的策略可以使得不被匹配时效率更高</p></div><h3 id="渲染性能" tabindex="-1">渲染性能 <a class="header-anchor" href="#渲染性能" aria-hidden="true">#</a></h3><ul><li>减少页面重排和重绘</li><li>浏览器样式前缀应放在标准属性前面</li><li>使用CSS精灵图优化请求次数</li><li>正确使用<code>display</code>属性，有些组合是无效的，导致体积增加</li><li><code>web-fonts</code>体积较大，会阻塞页面渲染</li><li>属性为0时，不要追加单位</li><li>属性值例如<code>0.15</code>，可以直接写成<code>.15</code></li></ul><h3 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-hidden="true">#</a></h3><ul><li><a href="https://juejin.cn/post/6844903649605320711" target="_blank" rel="noreferrer">CSS性能优化的8个技巧</a></li><li><a href="https://benfrain.com/css-performance-revisited-selectors-bloat-expensive-styles/#h-H1_1" target="_blank" rel="noreferrer">CSS performance revisited: selectors, bloat and expensive styles</a></li></ul>',12),o=[d];function t(r,s,n,h,_,p){return l(),i("div",null,o)}const f=e(c,[["render",t]]);export{u as __pageData,f as default};
