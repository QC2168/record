import{_ as s,o as a,c as n,a as l}from"./app.d2180f1d.js";const A=JSON.parse('{"title":"如何获取node命令行中参数","description":"","frontmatter":{"title":"如何获取node命令行中参数","tags":["JavaScript"]},"headers":[{"level":2,"title":"如何获取node命令行中参数","slug":"如何获取node命令行中参数","link":"#如何获取node命令行中参数","children":[]},{"level":2,"title":"认识process","slug":"认识process","link":"#认识process","children":[]},{"level":2,"title":"process.arg","slug":"process-arg","link":"#process-arg","children":[]},{"level":2,"title":"封装获取参数函数","slug":"封装获取参数函数","link":"#封装获取参数函数","children":[]},{"level":2,"title":"相关的解析库","slug":"相关的解析库","link":"#相关的解析库","children":[]}],"relativePath":"article/如何获取node命令行参数.md"}'),p={name:"article/如何获取node命令行参数.md"},o=l(`<h2 id="如何获取node命令行中参数" tabindex="-1">如何获取node命令行中参数 <a class="header-anchor" href="#如何获取node命令行中参数" aria-hidden="true">#</a></h2><p>在开发<code>cli</code>工具时，往往离不开获取指令中各种参数信息，接下来本文将带着你如何在<code>Node.js</code>中获取执行时的参数</p><h2 id="认识process" tabindex="-1">认识process <a class="header-anchor" href="#认识process" aria-hidden="true">#</a></h2><p><code>process</code>是<code>nodejs</code>内置的一个对象，该对象提供了当前有关<code>nodejs</code>进程的信息。（例如获取当前进程id，执行平台等与当前执行进程相关的对象和方法）</p><blockquote><p><a href="https://nodejs.org/api/process.html#process" target="_blank" rel="noreferrer">node process文档</a></p></blockquote><h2 id="process-arg" tabindex="-1">process.arg <a class="header-anchor" href="#process-arg" aria-hidden="true">#</a></h2><p>在该对象中，有一个<code>argv</code>属性，它可以获取当前<code>node</code>执行时传入各个参数数据。</p><p>我们创建一个<code>index.js</code>文件，先打印下<code>process.argv</code>里面是什么东西</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// node index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">software</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">nodejs</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node.exe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">project</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">script</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>从上面的输出结果，可以得到当前执行的<code>node</code>程序路径(也就是<code>process.execPath</code>返回值)和执行的文件（<code>index.js</code>）路径，我们像使用其他<code>cli</code>工具一样添加一些参数试试</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">name=zhangsan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">age=</span><span style="color:#F78C6C;">18</span></span>
<span class="line"></span></code></pre></div><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">software</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">nodejs</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node.exe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">project</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">script</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name=zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age=18</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><p>可以看到我们传入的<code>name</code>参数与<code>age</code>参数也被获取到了</p><blockquote><p>需要注意的是argv中的参数是通过空格来分割的</p></blockquote><p>通常，我们会在命令行每个参数前面添加<code>--</code>字符，用来识别传入的各个参数。（这种是<code>GNU</code>风格的命令行参数，以<code>--</code>开头，也是比较常见的）</p><p>例如在<code>esbuild</code>构建工具中</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.jsx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--outfile=out.js</span></span>
<span class="line"></span></code></pre></div><p>例如在<code>vite</code>构建工具中</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">vite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-config.js</span></span>
<span class="line"></span></code></pre></div><p>除了上面的<code>GNU</code>风格，常见的还有<code>UNIX</code>风格，以<code>-</code>开头的，例如下面命令获取当前目录下文件，文件夹详情。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span></span>
<span class="line"></span></code></pre></div><p>你是不是会想到了最常用的<code>npm</code>了？ 没错，它即是使用<code>UNIX</code>风格</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm i -d esbuild</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>继续我们步骤，修改一下上面的命令为</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=zhangsan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--age=18</span></span>
<span class="line"></span></code></pre></div><p>将会得到如下输出结果</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">software</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">nodejs</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node.exe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">D:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">project</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">script</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--name=zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--age=18</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="封装获取参数函数" tabindex="-1">封装获取参数函数 <a class="header-anchor" href="#封装获取参数函数" aria-hidden="true">#</a></h2><p>从上面两个例子和官方文档中，我们可以得知argv的前两个参数都是固定的，在获取用户传入的参数我们需要<code>process.argv.slice(2)</code>一下,只获取从下标2开始的元素。 也即是</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--name=zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--age=18</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>有了这些数据之后，我们需要再进一步解构里面的参数，将前面的<code>--</code>去除掉，把<code>key=value</code>改变成<code>{key:value}</code>方便我们在开发中进行参数获取。 最终我们得到了这样子的函数：</p><ul><li>获<code>process.argv</code>数组，并切片从下标2开始</li><li>判断数组中的每个值是否为<code>--</code>开头，是则视为用户传入参数</li><li>同样进行切片操作，获取下标2开始的字符，再通过<code>=</code>区分出对应的<code>key</code>和<code>value</code>，其返回的是<code>[key,value]</code></li><li>最后，将这个二维数组传入到<code>Object.fromEntries</code>转换为一个对象</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arguments </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromEntries</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  arguments</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pre</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">pre</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pre</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(params)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// { name: &#39;zhangsan&#39;, age: &#39;18&#39; }</span></span>
<span class="line"></span></code></pre></div><p>当然，上面这个只是简单的获取参数的函数，也没有一些边界情况（例如出现<code>foo=bar=baz</code>参数等情况）。</p><h2 id="相关的解析库" tabindex="-1">相关的解析库 <a class="header-anchor" href="#相关的解析库" aria-hidden="true">#</a></h2><p>在<code>github</code>上也有一些成熟的命令行参数解析库，感兴趣的同学也可以看看源码🍔🍔</p><ul><li><a href="https://github.com/lukeed/mri" target="_blank" rel="noreferrer">mri</a></li><li><a href="https://github.com/yargs/yargs-parser" target="_blank" rel="noreferrer">yargs-parser</a></li><li><a href="https://github.com/minimistjs/minimist" target="_blank" rel="noreferrer">minimist</a></li></ul><p>😊 如果您觉得这一篇文章对您有所帮助，请点个👍 🌹🌹</p>`,38),e=[o];function c(t,r,y,D,i,C){return a(),n("div",null,e)}const F=s(p,[["render",c]]);export{A as __pageData,F as default};
