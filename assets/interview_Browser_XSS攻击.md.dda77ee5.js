import{_ as e,o as l,c as t,a as i}from"./app.fdb18e74.js";const g=JSON.parse('{"title":"XSS攻击","description":"","frontmatter":{"title":"XSS攻击","tags":["Browser"]},"headers":[{"level":2,"title":"XSS攻击","slug":"xss攻击","link":"#xss攻击","children":[]},{"level":2,"title":"存储型","slug":"存储型","link":"#存储型","children":[]},{"level":2,"title":"反射型","slug":"反射型","link":"#反射型","children":[]},{"level":2,"title":"文档型","slug":"文档型","link":"#文档型","children":[]},{"level":2,"title":"如何防范XSS","slug":"如何防范xss","link":"#如何防范xss","children":[{"level":3,"title":"转义","slug":"转义","link":"#转义","children":[]},{"level":3,"title":"防范存储型和反射型","slug":"防范存储型和反射型","link":"#防范存储型和反射型","children":[]},{"level":3,"title":"CSP（Content Security Policy，浏览器中的内容安全策略）","slug":"csp-content-security-policy-浏览器中的内容安全策略","link":"#csp-content-security-policy-浏览器中的内容安全策略","children":[]},{"level":3,"title":"限制用户输入长度","slug":"限制用户输入长度","link":"#限制用户输入长度","children":[]},{"level":3,"title":"设置Http-only","slug":"设置http-only","link":"#设置http-only","children":[]}]}],"relativePath":"interview/Browser/XSS攻击.md"}'),a={name:"interview/Browser/XSS攻击.md"},s=i(`<h2 id="xss攻击" tabindex="-1">XSS攻击 <a class="header-anchor" href="#xss攻击" aria-hidden="true">#</a></h2><p>XXS即（Cross Site Scripting），跨站脚本，为什么不是叫CSS呢？原因是为了CSS（Cascading Style Sheets）做出区分。</p><p>是最普遍的Web应用安全漏洞</p><p>指的是在浏览器中执行恶意脚本，获取用户数据信息并执行对应的操作</p><p>XSS一般可以操作一下事件</p><ul><li>窃取Cookie，因为它会在浏览器发送请求时自动发出</li><li>监听用户行为，通过植入脚本方式，获取用户行为发送到目标服务器（攻击者）</li><li>修改Dom，伪造登录表单，植入iframe</li><li>在页面中生成广告</li><li>在访问量较大的网站上的XSS可以攻击一些小型网站，实现DDos攻击</li></ul><p>XSS也分为三种方式</p><h2 id="存储型" tabindex="-1">存储型 <a class="header-anchor" href="#存储型" aria-hidden="true">#</a></h2><p>存储型（又称<strong>持久型</strong>）指的是将数据储存起来，将一段恶意脚本代码存储到网站的数据库中，在后续客户端执行的时候就会直接执行这一段脚本代码，达到攻击效果</p><p>例如在评论区页面的提交输入框输入<code>&lt;script&gt;alter(&#39;我是攻击代码&#39;)&lt;/script&gt;</code>，提交的时候如果前后端都没有做好处理，当下次浏览器渲染评论区内容时就会直接执行该代码。</p><p>像现在主流的Vue框架都会对代码做出转义工作，<a href="https://cn.vuejs.org/guide/best-practices/security.html#potential-dangers" target="_blank" rel="noreferrer">详情请查阅</a></p><h2 id="反射型" tabindex="-1">反射型 <a class="header-anchor" href="#反射型" aria-hidden="true">#</a></h2><p>反射性指的是将恶意脚本作为网络请求的一部分</p><p>例如浏览器发出一个带有query参数的请求</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">http://192.168.0.29/api/get?num=&lt;script&gt;alert(&quot;我是攻击代码&quot;)&lt;/script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>服务器拿到这个参数时候，再返回给客户端，此时浏览器解析的时候就会执行对应的内容，达到攻击效果</p><p>因为通过了浏览器-&gt;服务器-&gt;浏览器-&gt;解析执行，所以被命名为反射型</p><h2 id="文档型" tabindex="-1">文档型 <a class="header-anchor" href="#文档型" aria-hidden="true">#</a></h2><p>文档型指的是通过“中间人”的方式进行攻击，在客户端与服务器端进行数据传输的时候通过劫持网络数据包，修改里面的内容。</p><h2 id="如何防范xss" tabindex="-1">如何防范XSS <a class="header-anchor" href="#如何防范xss" aria-hidden="true">#</a></h2><h3 id="转义" tabindex="-1">转义 <a class="header-anchor" href="#转义" aria-hidden="true">#</a></h3><p>不要相信任何一方提供的输入，都要对其进行转义工作</p><p>例如<code>5 &lt; 7</code>，转义为<code>5 &amp;lt; 7</code></p><h3 id="防范存储型和反射型" tabindex="-1">防范存储型和反射型 <a class="header-anchor" href="#防范存储型和反射型" aria-hidden="true">#</a></h3><p>存储型和反射型都是从服务器端取出恶意代码之后，将其插入到html被浏览器执行的。</p><p>常见的预防方法有</p><ul><li>改成纯前端渲染，把代码和数据进行分开 <ul><li>具体做法是</li><li>浏览器先加载一个静态的html，与不包含业务的数据</li><li>通过js网络请求数据，调用DomApi更新到页面上</li></ul></li><li>对HTML进行转义操作 <ul><li>常见的模板引擎都会对HTML内容进行转义（<code>&amp; &lt; &gt; &quot; &#39; /</code>）</li></ul></li></ul><h3 id="csp-content-security-policy-浏览器中的内容安全策略" tabindex="-1">CSP（Content Security Policy，浏览器中的内容安全策略） <a class="header-anchor" href="#csp-content-security-policy-浏览器中的内容安全策略" aria-hidden="true">#</a></h3><p>严格的 CSP 在 XSS 的防范中可以起到以下的作用：</p><ul><li>禁止加载外域代码，防止复杂的攻击逻辑</li><li>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域</li><li>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）</li><li>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）</li><li>合理使用上报可以及时发现 XSS，利于尽快修复问题</li></ul><h3 id="限制用户输入长度" tabindex="-1">限制用户输入长度 <a class="header-anchor" href="#限制用户输入长度" aria-hidden="true">#</a></h3><p>对于不受信任的输入，应该规定一个合理的长度，虽然无法完全方式XSS攻击，但可以增加 XSS 攻击的难度</p><h3 id="设置http-only" tabindex="-1">设置Http-only <a class="header-anchor" href="#设置http-only" aria-hidden="true">#</a></h3><p>禁止js读取cookie，攻击者在植入脚本后无法窃取cookie数据</p>`,34),r=[s];function n(c,p,o,d,h,u){return l(),t("div",null,r)}const _=e(a,[["render",n]]);export{g as __pageData,_ as default};
