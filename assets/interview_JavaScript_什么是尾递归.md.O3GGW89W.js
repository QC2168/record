import{_ as s,o as i,c as a,R as t}from"./chunks/framework.qjNjGLUL.js";const _=JSON.parse('{"title":"什么是尾递归","description":"","frontmatter":{"title":"什么是尾递归","tags":["JavaScript"]},"headers":[],"relativePath":"interview/JavaScript/什么是尾递归.md","filePath":"interview/JavaScript/什么是尾递归.md"}'),n={name:"interview/JavaScript/什么是尾递归.md"},e=t(`<h2 id="什么是尾递归" tabindex="-1">什么是尾递归 <a class="header-anchor" href="#什么是尾递归" aria-label="Permalink to &quot;什么是尾递归&quot;">​</a></h2><p>尾递归指的是在递归函数时，在<code>return</code>时调用起另外一个函数</p><p>代码执行是基于执行栈的，所以当在一个函数里调用另外一个函数时，会保留当前函数上下文，在新建一个执行上下文加入到栈中</p><p>如果是采用尾递归方式，在最后返回的时候可以不保留当前执行上下文，达到节省内存优化，也就是常说的尾递归优化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尾递归</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>但是不建议使用尾递归，因为不方便后续debugger，而且ES6中默认尾递归是无效的 在V8中尾递归优化功能已经被移除了，也是因为尾递归会破坏函数的调用栈信息 <a href="https://github.com/tc39/proposal-ptc-syntax" target="_blank" rel="noreferrer">proposal-ptc-syntax</a></p></blockquote>`,6),p=[e];function h(l,r,k,o,c,d){return i(),a("div",null,p)}const g=s(n,[["render",h]]);export{_ as __pageData,g as default};
