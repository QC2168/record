import{_ as e,o as d,c,a as o}from"./app.2cd5a615.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"浏览器缓存机制","slug":"浏览器缓存机制","link":"#浏览器缓存机制","children":[]},{"level":2,"title":"基本原理","slug":"基本原理","link":"#基本原理","children":[]},{"level":2,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[{"level":3,"title":"Expires","slug":"expires","link":"#expires","children":[]},{"level":3,"title":"Cache-control","slug":"cache-control","link":"#cache-control","children":[]}]},{"level":2,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[{"level":3,"title":"结合强缓存具体请求流程","slug":"结合强缓存具体请求流程","link":"#结合强缓存具体请求流程","children":[]},{"level":3,"title":"为什么需要ETag","slug":"为什么需要etag","link":"#为什么需要etag","children":[]}]},{"level":2,"title":"状态码区别","slug":"状态码区别","link":"#状态码区别","children":[]},{"level":2,"title":"缓存优先级","slug":"缓存优先级","link":"#缓存优先级","children":[]},{"level":2,"title":"启发式缓存","slug":"启发式缓存","link":"#启发式缓存","children":[]},{"level":2,"title":"其他补充","slug":"其他补充","link":"#其他补充","children":[]},{"level":2,"title":"注意场景","slug":"注意场景","link":"#注意场景","children":[]}],"relativePath":"article/HTTP协商缓存.md"}'),t={name:"article/HTTP协商缓存.md"},a=o('<h2 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-hidden="true">#</a></h2><p>我们都知道当我们在浏览器中打开一个页面时，浏览器会根据你输入的URL到对应的服务器上请求你想要的数据资源。但这个过程中可能页面可能需要等待一段时间（白屏时间）才能渲染到你的页面中。</p><p>当你想要提高用户体验时，那就不得不提各种缓存技术了，例如：DNS缓存、CDN缓存。浏览器缓存、页面本地缓存等等，有一个良好的缓存策略可以减低重复资源的请求，降低服务器的开销，提高用户页面的加载速度。</p><p>而这一篇文章将聊聊什么的<code>HTTP</code>强缓存和协商缓存</p><h2 id="基本原理" tabindex="-1">基本原理 <a class="header-anchor" href="#基本原理" aria-hidden="true">#</a></h2><p>在浏览器加载资源的时候，首先会根据请求头的<code>expires</code>和<code>cache-control</code>判断是否命中强缓存策略，判断是否向远程服务器请求资源还是去本地获取缓存资源。</p><h2 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-hidden="true">#</a></h2><p>在浏览器中，强缓存分为<code>Expires</code>（http1.0规范）、<code>cache-control</code>（http1.1规范）两种。</p><h3 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-hidden="true">#</a></h3><p><code>Expires</code>是<code>http1.0</code>的规范，用于表示资源的过期时间的请求头字段，值是一个绝对时间，是由服务器端返回的。</p><p>在浏览器第一个请求资源时，服务器端的响应头会附上<code>Expires</code>这个响应字段，当浏览器在下一次请求这个资源时会根据上次的<code>expires</code>字段是否使用缓存资源（当请求时间小于服务端返回的到期时间，直接使用缓存数据）</p><blockquote><p>expires是根据本地时间来判断的，假设客户端和服务器时间不同，会导致缓存命中误差</p></blockquote><h3 id="cache-control" tabindex="-1">Cache-control <a class="header-anchor" href="#cache-control" aria-hidden="true">#</a></h3><p>上面我们提到了<code>Expires</code>有个缺点，当客户端本地时间和服务器时间不一致时会产生误差，浏览器会直接向服务器请求新的资源，为了解决这个问题，在<code>http1.1</code>规范中，提出了<code>cache-control</code>字段，且<strong>这个字段优先级高于上面提到的<code>Expires</code></strong>，值是相对时间。</p><p>在<code>cache-control</code>中有常见的几个响应属性值，它们分别是</p><table><thead><tr><th>属性值</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>max-age</td><td>3600</td><td>例如值为3600，表示（当前时间+3600秒）内不与服务器请求新的数据资源</td></tr><tr><td>s-maxage</td><td></td><td>和max-age一样，但这个是设定代理服务器的缓存时间</td></tr><tr><td>private</td><td></td><td>内容只缓存到私有缓存中(仅客户端可以缓存，代理服务器不可缓存)</td></tr><tr><td>public</td><td></td><td>所有内容都将被缓存(客户端和代理服务器都可缓存)</td></tr><tr><td>no-store</td><td></td><td>不缓存任何数据</td></tr><tr><td>no-cache</td><td></td><td>储存在本地缓存区中，只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用</td></tr></tbody></table><h2 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a></h2><p>上面提到的强缓存都是由本地浏览器在确定是否使用缓存，当浏览器没有命中强缓存时就会向浏览器发送请求，验证协商缓存是否命中，如果缓存命中则返回304状态码，否则返回新的资源数据。</p><p>协商缓存（也叫对比缓存）是由服务器来确定资源是否可用，这将涉及到两组字段成对出现的，在浏览器第一次发出请求时会带上字段（Last-Modified或者<code>Etag</code>），则后续请求则会带上对于的请求字段（<code>if-modified-since</code>或者<code>if-none-Match</code>），若响应头没有<code>Last-Modified</code>或者<code>Etag</code>，则请求头也不会有对应的字段</p><ul><li><code>Last-modified</code>表示本地文件最后修改时间，由服务器返回</li><li><code>if-modified-since</code>是浏览器在请求数据时返回的，值是上次浏览器返回的Last-modified</li><li><code>ETag</code>是一个文件的唯一标识符，当资源发生变化时这个<code>ETag</code>就会发生变化。弥补了上面<code>last-modified</code>可能出现文件内容没有变化但是<code>last-modified</code>发生了变化出现重新向服务器请求资源情况。这个值也是又服务器返回的</li><li><code>if-none-match</code>是浏览器请求数据时带上的字段，值是上次服务器返回的<code>ETag</code></li></ul><p>这么说可能不太明白，我画了一个请求流程图，看一下就很快可以明白什么是协商缓存啦</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8360da6fa1af4f89abeedc27f6f552e3~tplv-k3u1fbpfcp-watermark.image?" alt="Untitled Diagram (1).png"></p><h3 id="结合强缓存具体请求流程" tabindex="-1">结合强缓存具体请求流程 <a class="header-anchor" href="#结合强缓存具体请求流程" aria-hidden="true">#</a></h3><ol><li>当浏览器发起一个资源请求时，浏览器会先判断本地是否有缓存记录，如果没有会向浏览器请求新的资源，并记录服务器返回的<code>last-modified</code>。</li><li>如果有缓存记录，先判断强缓存是否存在（<code>cache-control</code>优先于<code>expires</code>，后面会说），如果强缓存的时间没有过期则返回本地缓存资源（状态码为200）</li><li>如果强缓存失效了，客户端会发起请求进行协商缓存策略，首先服务器判断<code>Etag</code>标识符，如果客户端传来标识符和当前服务器上的标识符是一致的，则返回状态码 <code>304 not modified</code>（不会返回资源内容）</li><li>如果没有<code>Etag</code>字段，服务器会对比客户端传过来的<code>if-modified-match</code>，如果这两个值是一致的，此时响应头不会带有<code>last-modified</code>字段（因为资源没有变化，<code>last-modified</code>的值也不会有变化）。客户端304状态码之后读取本地缓存。如果<code>last-modified</code>。</li><li>如果<code>Etag</code>和服务器端上的不一致，重新获取新的资源，并进行协商缓存返回数据。</li></ol><h3 id="为什么需要etag" tabindex="-1">为什么需要ETag <a class="header-anchor" href="#为什么需要etag" aria-hidden="true">#</a></h3><p>它的出现主要是解决<code>last-modified</code>几个比较难以解决的问题</p><ol><li>在没有修改文件内容情况下文件的最后修改时间可能也会改变，这会导致客户端认为这文件被改动了，从而重新请求</li><li>可能有些文件修改比较频繁，秒级以内修改的，<code>If-Modified-Since</code> 能检查到的粒度是秒级的，使用 <code>Etag</code> 就能够保证这种需求下客户端在 1 秒内能刷新多次。</li><li>有些服务器不能精确获取文件的最后修改时间</li></ol><h2 id="状态码区别" tabindex="-1">状态码区别 <a class="header-anchor" href="#状态码区别" aria-hidden="true">#</a></h2><ul><li>200 请求成功，服务器返回全新的数据</li><li>200 <code>from memory cache / from disk cache</code> 本地强缓存还在有效期，直接使用本地缓存</li><li>304 请求成功，走了协商缓存，服务器判定（<code>Etag</code>和<code>Last-modified</code>）没有过期，告知浏览器使用缓存</li></ul><blockquote><p>from memory cache 是页面刷新的时候内存取的 from disk cache 页面tab关闭后从磁盘取的</p></blockquote><h2 id="缓存优先级" tabindex="-1">缓存优先级 <a class="header-anchor" href="#缓存优先级" aria-hidden="true">#</a></h2><p><code>expires</code>和<code>cache-control</code>如果同时存在时，<code>cache-control</code>会覆盖<code>expires</code>，<code>expires</code>无效，无论是否过期，。即 <code>Cache-control &gt; expires</code></p><p>强缓存和协商缓存如果同时存在时，会去先对比强缓存是否还再有效期，如果强缓存还在有效期内则直接使用强缓存，否则协商缓存生效，即<code>强缓存 &gt; 协商缓存</code></p><p>协商缓存<code>Etag</code>和<code>last-modified</code>同时存在时，会先比较<code>Etag</code>，<code>last-modified</code>无效，即<code>Etag &gt; last-modified</code></p><blockquote><p>补充一下：</p><p>在http1.0规范时还有一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Pragma" target="_blank" rel="noreferrer">Pragma</a>缓存策略，那时候Cache-control（http1.1）还没出，它与 Cache-Control: no-cache 效果一致。强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证</p></blockquote><blockquote><p>paragma -&gt; Cache-control -&gt; expires -&gt; Etag -&gt; last-modified</p></blockquote><h2 id="启发式缓存" tabindex="-1">启发式缓存 <a class="header-anchor" href="#启发式缓存" aria-hidden="true">#</a></h2><p>这个会缓存策略是浏览器默认的，如果发送一个网络请求没有<code>expires</code>、<code>cache-control</code>，但是又有<code>last-modified</code>字段，那么在这种情况下浏览器会有一个默认缓存策略<code>（currentTime - last-modified ）*0.1</code></p><blockquote><p>只有服务端没有返回明确的缓存策略时才会激活浏览器的启发式缓存策略</p></blockquote><p><a href="https://paulcalvano.com/2018-03-14-http-heuristic-caching-missing-cache-control-and-expires-headers-explained/" target="_blank" rel="noreferrer">HTTP Heuristic Caching (Missing Cache-Control and Expires Headers) Explained</a></p><h2 id="其他补充" tabindex="-1">其他补充 <a class="header-anchor" href="#其他补充" aria-hidden="true">#</a></h2><ul><li>协商缓存想要配合强缓存使用，如果不开启强缓存使用，协商缓存没有意义</li><li>大部分<code>web</code>服务器默认开启协商缓存，且是同时开启<code>last-modified</code>和<code>Etag</code></li></ul><h2 id="注意场景" tabindex="-1">注意场景 <a class="header-anchor" href="#注意场景" aria-hidden="true">#</a></h2><ol><li>分布式系统里<code>last-modified</code>需要保持一致，以免负载到不同的机器导致比对失败，从而返回新资源</li><li>分布式系统尽量关闭掉<code>Etag</code>，因为每一台服务器生成的<code>Etag</code>是不同的</li></ol>',44),i=[a];function l(r,h,n,s,p,f){return d(),c("div",null,i)}const u=e(t,[["render",l]]);export{m as __pageData,u as default};
