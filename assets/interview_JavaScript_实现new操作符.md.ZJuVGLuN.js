import{_ as e,o as a,c as s,R as i}from"./chunks/framework.sdpcv3_n.js";const w=JSON.parse('{"title":"实现new操作符","description":"","frontmatter":{"title":"实现new操作符","tags":["JavaScript"]},"headers":[],"relativePath":"interview/JavaScript/实现new操作符.md","filePath":"interview/JavaScript/实现new操作符.md"}'),n={name:"interview/JavaScript/实现new操作符.md"},t=i(`<h2 id="实现new运算符" tabindex="-1">实现new运算符 <a class="header-anchor" href="#实现new运算符" aria-label="Permalink to &quot;实现new运算符&quot;">​</a></h2><p><code>new</code>操作符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。（引用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noreferrer">MDN</a>）</p><p>new运算符用于创建一个实例对象，例如</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用new操作符创建一个数组  等价于 let arr = [] (字面量形式)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用new操作符创建一个对象  等价于 let obj = {} (字面量形式)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="new需要搭配构造函数使用-通过new一个构造函数来创建一个实例。" tabindex="-1">new需要搭配构造函数使用，通过new一个构造函数来创建一个实例。 <a class="header-anchor" href="#new需要搭配构造函数使用-通过new一个构造函数来创建一个实例。" aria-label="Permalink to &quot;new需要搭配构造函数使用，通过new一个构造函数来创建一个实例。&quot;">​</a></h4><h2 id="new主要做了些什么事情" tabindex="-1">new主要做了些什么事情 <a class="header-anchor" href="#new主要做了些什么事情" aria-label="Permalink to &quot;new主要做了些什么事情&quot;">​</a></h2><ol><li>开辟一块新的空间，创建一个新的对象</li><li>将这个空对象的<code>__proto__</code>属性指向构造函数的原型<code>prototype</code></li><li>将构造函数的<code>this</code>改变为这个空对象</li><li>判断构建函数返回类型，如果有对象则返回对象，没有则返回<code>this</code></li></ol><h2 id="手写new" tabindex="-1">手写new <a class="header-anchor" href="#手写new" aria-label="Permalink to &quot;手写new&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span></code></pre></div>`,9),l=[t];function r(h,p,o,c,d,k){return a(),s("div",null,l)}const g=e(n,[["render",r]]);export{w as __pageData,g as default};
