import{_ as s,o as a,c as n,a as l}from"./app.a47fbf28.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么需要this","slug":"为什么需要this","link":"#为什么需要this","children":[]},{"level":2,"title":"this的作用","slug":"this的作用","link":"#this的作用","children":[]},{"level":2,"title":"this指向什么","slug":"this指向什么","link":"#this指向什么","children":[]},{"level":2,"title":"全局作用域中的this指向","slug":"全局作用域中的this指向","link":"#全局作用域中的this指向","children":[]},{"level":2,"title":"this绑定规则","slug":"this绑定规则","link":"#this绑定规则","children":[]},{"level":2,"title":"默认绑定","slug":"默认绑定","link":"#默认绑定","children":[]},{"level":2,"title":"默认绑定的案例一","slug":"默认绑定的案例一","link":"#默认绑定的案例一","children":[]},{"level":2,"title":"默认绑定的案例二","slug":"默认绑定的案例二","link":"#默认绑定的案例二","children":[]},{"level":2,"title":"默认绑定的案例三","slug":"默认绑定的案例三","link":"#默认绑定的案例三","children":[]},{"level":2,"title":"默认绑定的案例四","slug":"默认绑定的案例四","link":"#默认绑定的案例四","children":[]},{"level":2,"title":"默认绑定的案例五","slug":"默认绑定的案例五","link":"#默认绑定的案例五","children":[]},{"level":2,"title":"默认绑定的案例六","slug":"默认绑定的案例六","link":"#默认绑定的案例六","children":[]},{"level":2,"title":"隐式绑定","slug":"隐式绑定","link":"#隐式绑定","children":[]},{"level":2,"title":"隐式绑定的案例一","slug":"隐式绑定的案例一","link":"#隐式绑定的案例一","children":[]},{"level":2,"title":"隐式绑定的案例二","slug":"隐式绑定的案例二","link":"#隐式绑定的案例二","children":[]},{"level":2,"title":"隐式绑定的案例三","slug":"隐式绑定的案例三","link":"#隐式绑定的案例三","children":[]},{"level":2,"title":"显示绑定","slug":"显示绑定","link":"#显示绑定","children":[]},{"level":2,"title":"显示绑定的案例 | call apply","slug":"显示绑定的案例-call-apply","link":"#显示绑定的案例-call-apply","children":[]},{"level":2,"title":"new绑定","slug":"new绑定","link":"#new绑定","children":[]},{"level":2,"title":"new绑定的案例","slug":"new绑定的案例","link":"#new绑定的案例","children":[]},{"level":2,"title":"规律优先级","slug":"规律优先级","link":"#规律优先级","children":[]},{"level":2,"title":"this规则之外","slug":"this规则之外","link":"#this规则之外","children":[]},{"level":2,"title":"忽略显示绑定","slug":"忽略显示绑定","link":"#忽略显示绑定","children":[]},{"level":2,"title":"ES6箭头函数","slug":"es6箭头函数","link":"#es6箭头函数","children":[]},{"level":2,"title":"箭头函数 arrow function","slug":"箭头函数-arrow-function","link":"#箭头函数-arrow-function","children":[]}],"relativePath":"note/JavaScript/THIS的绑定规则.md"}'),o={name:"note/JavaScript/THIS的绑定规则.md"},p=l(`<h2 id="为什么需要this" tabindex="-1">为什么需要this <a class="header-anchor" href="#为什么需要this" aria-hidden="true">#</a></h2><ul><li><p>在常见的编程语言中，几乎都有this这个关键字（Objective-C中使用的是self），但是JavaScript中的this和常见的面向对象语言的this不太一样</p><ul><li><p>常见面向对象的编程语言中，比如java，C++，Swift，Dart等等一系列语言中，this通常只会出现在类方法中</p></li><li><p>也就是你需要有一个类，类中方法（特别是实例方法）中，this代表的是当前调用对象</p></li><li><p>但是JavaScript中的this更加灵活，无论是它出现的位置还是它代表的含义</p></li><li><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">speak</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 当前实例对象</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul><h2 id="this的作用" tabindex="-1">this的作用 <a class="header-anchor" href="#this的作用" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">eating</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在吃东西</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">running</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在跑步</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">studying</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在学习</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从某些角度来说，开发中如果没有obj，很多的问题我们也是有解决方案的</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 但是如果没有this，会让我们编写代码变得非常不方便</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eating</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">running</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">studying</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">eating</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在吃东西</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">running</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在跑步</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">studying</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在学习</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="this指向什么" tabindex="-1">this指向什么 <a class="header-anchor" href="#this指向什么" aria-hidden="true">#</a></h2><ol><li>函数在调用时，JavaScript会默认给this绑定一个值</li><li>this的绑定和定义的位置是没有关系的</li><li>this1的绑定和调用方式以及调用位置有关系</li><li>this是在运行时被绑定的</li></ol><h2 id="全局作用域中的this指向" tabindex="-1">全局作用域中的this指向 <a class="header-anchor" href="#全局作用域中的this指向" aria-hidden="true">#</a></h2><p>大多数情况下，this都是出现在函数中的，而在全局作用域中也有this</p><ul><li>浏览器中全局作用域中的this指向<code>window</code> （<code>globalObject</code>）</li><li>NODE中全局作用域中的this指向 <code>{}</code> （空对象） <ul><li>因为在<code>node</code>执行的时候，<code>node</code>会把这个<code>js</code>文件当成一个模块，加载模块，编译代码，放到一个函数里面.<code>apply</code>({})</li><li>在<code>node</code>环境下如果执行打印<code>window</code>会报错<code>no defined</code></li></ul></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">浏览器环境：</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#A6ACCD;">Node环境：</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 在node会报错, no defined</span></span>
<span class="line"></span></code></pre></div><h2 id="this绑定规则" tabindex="-1">this绑定规则 <a class="header-anchor" href="#this绑定规则" aria-hidden="true">#</a></h2><h2 id="默认绑定" tabindex="-1">默认绑定 <a class="header-anchor" href="#默认绑定" aria-hidden="true">#</a></h2><ul><li>独立的函数调用可以理解成函数没有被绑定到某个对象上进行调用</li></ul><h2 id="默认绑定的案例一" tabindex="-1">默认绑定的案例一 <a class="header-anchor" href="#默认绑定的案例一" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认绑定，是一个独立函数，没有绑定对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指向window</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="默认绑定的案例二" tabindex="-1">默认绑定的案例二 <a class="header-anchor" href="#默认绑定的案例二" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo1</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">foo1</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo3</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">foo2</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">foo3</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="默认绑定的案例三" tabindex="-1">默认绑定的案例三 <a class="header-anchor" href="#默认绑定的案例三" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {name: &#39;hxh&#39;, foo: ƒ}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 和位置没有关系</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"></span></code></pre></div><h2 id="默认绑定的案例四" tabindex="-1">默认绑定的案例四 <a class="header-anchor" href="#默认绑定的案例四" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> foo</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 和位置没有关系</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"></span></code></pre></div><h2 id="默认绑定的案例五" tabindex="-1">默认绑定的案例五 <a class="header-anchor" href="#默认绑定的案例五" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}}</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">// 也是独立调用fn() // window</span></span>
<span class="line"></span></code></pre></div><h2 id="默认绑定的案例六" tabindex="-1">默认绑定的案例六 <a class="header-anchor" href="#默认绑定的案例六" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eating</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">fn </span><span style="color:#676E95;font-style:italic;">// 隐式绑定}obj.eating() // {eating: ƒ}</span></span>
<span class="line"></span></code></pre></div><h2 id="隐式绑定" tabindex="-1">隐式绑定 <a class="header-anchor" href="#隐式绑定" aria-hidden="true">#</a></h2><ul><li>它的调用位置是通过某个对象发起的函数调用，例如<code>obj2.bar()</code></li><li>object对象会被js引擎绑定到fn函数中this里面</li></ul><h2 id="隐式绑定的案例一" tabindex="-1">隐式绑定的案例一 <a class="header-anchor" href="#隐式绑定的案例一" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#676E95;font-style:italic;">// 独立函数调用// foo()var obj={  name:&#39;hxh&#39;,  foo:foo}obj.foo() // obj对象</span></span>
<span class="line"></span></code></pre></div><h2 id="隐式绑定的案例二" tabindex="-1">隐式绑定的案例二 <a class="header-anchor" href="#隐式绑定的案例二" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hxh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">eating</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在吃东西</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">running</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">在跑步</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eating</span><span style="color:#A6ACCD;">()obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">running</span><span style="color:#A6ACCD;">()var fn</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eatingfn</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 获取不到this.name，this指向fn</span></span>
<span class="line"></span></code></pre></div><h2 id="隐式绑定的案例三" tabindex="-1">隐式绑定的案例三 <a class="header-anchor" href="#隐式绑定的案例三" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">var obj2</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">obj2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// obj2对象</span></span>
<span class="line"></span></code></pre></div><h2 id="显示绑定" tabindex="-1">显示绑定 <a class="header-anchor" href="#显示绑定" aria-hidden="true">#</a></h2><ul><li>前提条件 <ul><li>必须在调用的对象内部有一个对函数的引用（比如一个属性）</li><li>假使没有这样引用，在进行调用时，会报找不到该函数的错误</li><li>正是通过这个引用，间接的将this绑定到这个对象上</li></ul></li><li>如果不希望在对象内部包含这个函数的引用，同时又希望在这个对象上强制调用 <ul><li>JavaScript所有的函数都可以使用call和apply方法（这个和prototype有关）</li><li>这两个函数的第一个参数都要求是一个对象，这个对象是给this准备的</li><li>调用这个函数时，会将this绑定到这个传入的对象上</li></ul></li></ul><h2 id="显示绑定的案例-call-apply" tabindex="-1">显示绑定的案例 | call apply <a class="header-anchor" href="#显示绑定的案例-call-apply" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">函数被调用了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">obj</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// windowfoo.call(obj) // objfoo.apply(obj) // objfoo.apply(&#39;aaa&#39;) // aaa// call和apply有什么区别// call和apply在执行函数时，是可以明确的绑定this，这个绑定规则称之为显示绑定function sum(num1,num2){  console.log(num1+num2,this);}sum(10,20)sum.call(&#39;call&#39;,10,20)sum.apply(&#39;apply&#39;,[10,20])</span></span>
<span class="line"></span></code></pre></div><ul><li>foo直接调用和call / apply调用的不同在于this绑定的不同</li><li>foo直接调用指向的是全局对象（window）</li></ul><p>显示绑定的案例 | bind</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">b</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">aaa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &#39;aaa&#39;</span></span>
<span class="line"></span></code></pre></div><ul><li>默认绑定和显示绑定bind会发生冲突，之所以优先级为 显示绑定高于默认绑定</li></ul><blockquote><p>bind会在堆内容开辟一块新的空间来存放这个新的函数</p></blockquote><h2 id="new绑定" tabindex="-1">new绑定 <a class="header-anchor" href="#new绑定" aria-hidden="true">#</a></h2><ul><li>JavaScript中的函数可以当做一个类的构造函数来使用，也就是使用new关键字</li><li>使用new关键字来调用函数是，会执行如下的操作 <ul><li>创建一个全新的对象，内部将调用一个函数时（构造器）</li><li>这个新对象会被执行prototype连接</li><li>这个新对象会绑定到函数调用的this上（<strong>this的绑定在这个步骤完成</strong>）</li><li>如果函数没有返回其他对象，表达式会返回这个新对象</li></ul></li></ul><h2 id="new绑定的案例" tabindex="-1">new绑定的案例 <a class="header-anchor" href="#new绑定的案例" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">function Person(name,age) {  this.name=name  this.age=age  return this;}var p1 = new Person(&#39;hxh&#39;,21);console.log(p1.name,p1.age);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="规律优先级" tabindex="-1">规律优先级 <a class="header-anchor" href="#规律优先级" aria-hidden="true">#</a></h2><ul><li>默认规则优先级最低</li><li>显示绑定优先级高于隐式绑定</li><li>new绑定优先级高于隐式绑定</li><li>new绑定优先级高于bind <ul><li>new绑定和call、apply是不允许同时使用的，所以不存在谁的优先级更高</li><li>new绑定可以和bind一起使用，new绑定优先级更高</li></ul></li></ul><p>new绑定 -&gt; 显示绑定 -&gt; 隐式绑定</p><h2 id="this规则之外" tabindex="-1">this规则之外 <a class="header-anchor" href="#this规则之外" aria-hidden="true">#</a></h2><h2 id="忽略显示绑定" tabindex="-1">忽略显示绑定 <a class="header-anchor" href="#忽略显示绑定" aria-hidden="true">#</a></h2><h2 id="es6箭头函数" tabindex="-1">ES6箭头函数 <a class="header-anchor" href="#es6箭头函数" aria-hidden="true">#</a></h2><ul><li>箭头函数不使用<code>this</code>的四种标准规则（也就是不绑定this），而是根据外层作用域来决定this</li></ul><h2 id="箭头函数-arrow-function" tabindex="-1">箭头函数 arrow function <a class="header-anchor" href="#箭头函数-arrow-function" aria-hidden="true">#</a></h2><ul><li>箭头函数是<strong>ES6之后增加</strong>的一种编写函数的方法，并且它比函数表达式要更加简洁： <ul><li>箭头函数<strong>不会绑定<code>this</code>、<code>arguments</code>属性</strong></li><li>箭头函数不能作为构造函数来使用（<strong>不能和new一起来使用，会抛出错误</strong>）</li></ul></li></ul>`,55),e=[p];function t(c,r,i,F,y,D){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
