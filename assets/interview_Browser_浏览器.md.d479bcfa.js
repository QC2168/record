import{_ as s,o as a,c as n,a as l}from"./app.98fe77a4.js";const h=JSON.parse('{"title":"浏览器原理篇","description":"","frontmatter":{"title":"浏览器原理篇","tags":["JavaScript"]},"headers":[{"level":2,"title":"浏览器原理篇","slug":"浏览器原理篇","link":"#浏览器原理篇","children":[{"level":3,"title":"浏览器缓存","slug":"浏览器缓存","link":"#浏览器缓存","children":[]},{"level":3,"title":"浏览器解析HTML","slug":"浏览器解析html","link":"#浏览器解析html","children":[]},{"level":3,"title":"script标签中async和defer属性有什么区别","slug":"script标签中async和defer属性有什么区别","link":"#script标签中async和defer属性有什么区别","children":[]},{"level":3,"title":"script tag module模式","slug":"script-tag-module模式","link":"#script-tag-module模式","children":[]},{"level":3,"title":"Load和DOMContentLoad区别","slug":"load和domcontentload区别","link":"#load和domcontentload区别","children":[]},{"level":3,"title":"浏览器自动填充","slug":"浏览器自动填充","link":"#浏览器自动填充","children":[]},{"level":3,"title":"link tag preload","slug":"link-tag-preload","link":"#link-tag-preload","children":[]},{"level":3,"title":"link tag prefetch","slug":"link-tag-prefetch","link":"#link-tag-prefetch","children":[]}]}],"relativePath":"interview/Browser/浏览器.md"}'),e={name:"interview/Browser/浏览器.md"},o=l(`<h2 id="浏览器原理篇" tabindex="-1">浏览器原理篇 <a class="header-anchor" href="#浏览器原理篇" aria-hidden="true">#</a></h2><h3 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a></h3><p>👉 <a href="https://juejin.cn/post/7101942484543995934" target="_blank" rel="noreferrer">HTTP中的强缓存与协商缓存</a></p><h3 id="浏览器解析html" tabindex="-1">浏览器解析HTML <a class="header-anchor" href="#浏览器解析html" aria-hidden="true">#</a></h3><p>::: TODO</p><h3 id="script标签中async和defer属性有什么区别" tabindex="-1">script标签中async和defer属性有什么区别 <a class="header-anchor" href="#script标签中async和defer属性有什么区别" aria-hidden="true">#</a></h3><p><code>async</code>（异步） 并行下载<code>script</code>脚本（不会中断<code>HTML</code>解析过程），下载完毕之后中断<code>HTML</code>解析，执行脚本内容.</p><p><code>defer</code>（延迟） 并行下载<code>script</code>脚本（不会中断<code>HTML</code>解析过程），在执行<code>DOMContentLoaded</code>事件之前，将下载好的<code>script</code>内容执行。</p><p>默认行为是 在下载script脚本时会中断HTML解析，如果脚本内容比较大时，会导致加载时间较久，无法很快渲染出整个页面</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script" target="_blank" rel="noreferrer">&lt;script&gt;: The Script element</a></p><h4 id="动态添加" tabindex="-1">动态添加 <a class="header-anchor" href="#动态添加" aria-hidden="true">#</a></h4><p>还有一种情况，通过<code>createElement</code>方法创建<code>script</code>标签，默认<code>async</code>属性为<code>true</code></p><p>如果你想要按照<code>script</code>标签添加的顺序执行，请<code>script.async=false</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> script1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">async </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  script</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(script1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> script2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  script2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">async </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  script2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(script2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    script1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    script2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    foo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    bar</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> --&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="script-tag-module模式" tabindex="-1">script tag module模式 <a class="header-anchor" href="#script-tag-module模式" aria-hidden="true">#</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>设置了module属性后，浏览器会对内部发起http请求，获取模块中的内容，此时<code>script</code>会在后台下载，不会阻塞<code>html</code>解析，等<code>html</code>加载完成后根据标签顺序执行</p><h3 id="load和domcontentload区别" tabindex="-1">Load和DOMContentLoad区别 <a class="header-anchor" href="#load和domcontentload区别" aria-hidden="true">#</a></h3><ul><li>页面中的DOM元素，CSS，JS，包含图片加载完成后触发Load事件</li><li>当HTML被加载解析完成之后，触发DOMContentLoad事件（比Load事件先触发，无需其他事件，如图片加载，CSS...）</li></ul><blockquote><p>在需要操作DOM的时候可以在DOMContentLoaded操作，如果涉及到图片这类资源内容需要在load事件中处理</p></blockquote><h3 id="浏览器自动填充" tabindex="-1">浏览器自动填充 <a class="header-anchor" href="#浏览器自动填充" aria-hidden="true">#</a></h3><p>很多浏览器会会在DOMContentLoaded中自动填充表单，例如上一次您在某个网页上输入了账号密码并在浏览器保存了这一份数据，那么下一次在加载这个网页时浏览器就会在DOMContentLoaded事件中自动填充保存的数据</p><h3 id="link-tag-preload" tabindex="-1">link tag preload <a class="header-anchor" href="#link-tag-preload" aria-hidden="true">#</a></h3><p>用于提前加载一些需要的依赖，并且这些资源会被优先加载</p><blockquote><p>需要搭配<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as" target="_blank" rel="noreferrer">as</a>属性使用</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="link-tag-prefetch" tabindex="-1">link tag prefetch <a class="header-anchor" href="#link-tag-prefetch" aria-hidden="true">#</a></h3><p>利用浏览器空闲时间，用于提前加载一些后续需要资源，例如其他页面，后续打开将提高加载速度 用</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prefetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">document</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">other.html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,29),p=[o];function t(c,r,D,i,d,y){return a(),n("div",null,p)}const C=s(e,[["render",t]]);export{h as __pageData,C as default};
