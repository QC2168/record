import{_ as s,o as i,c as a,R as n}from"./chunks/framework.sdpcv3_n.js";const g=JSON.parse('{"title":"前端如何实现文件下载","description":"","frontmatter":{"title":"前端如何实现文件下载","tags":["javascript"]},"headers":[],"relativePath":"article/前端项目是如何实现文件下载的？.md","filePath":"article/前端项目是如何实现文件下载的？.md"}'),t={name:"article/前端项目是如何实现文件下载的？.md"},p=n(`<h2 id="前端项目如何实现文件下载" tabindex="-1">前端项目如何实现文件下载？ <a class="header-anchor" href="#前端项目如何实现文件下载" aria-label="Permalink to &quot;前端项目如何实现文件下载？&quot;">​</a></h2><p>在业务开发中，我想大多数同学可能会遇到关于实现文件下载这方面的需求，例如说通过点击某一个小按钮或者标签来实现触发浏览器的下载功能</p><p>这里我先使用<code>koa2</code>作为后端，起一个小小的<code>Demo</code></p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023135249.png" alt="20231023135249"></p><p>在这个<code>Demo</code>中我写了一个请求文件流的<code>Api</code>，当客户端向这个<code>Api</code>进行请求数据后，服务器端会返回一个<code>File</code></p><p>接下来是前端部分了，我们用<code>pnpm create vite</code>快速起一个项目，这里我就不再演示这个过程了</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023140746.png" alt="20231023140746"></p><p>我简单的写了一个按钮并绑定了对应的请求函数，我们来看看<code>network</code>中报文会返回什么数据</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023140955.png" alt="20231023140955"></p><p>原来是跨域了，我们在<code>vite.config.ts</code>中处理一下，通过设置代理的方式来解决跨域问题</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023141253.png" alt="20231023141253"></p><p>接下来，我再请求一次看看</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023141508.png" alt="20231023141508"></p><p>现在，服务器也将我们想要的文件返回的过来，但是作为用户我是要下载这个文件，而不是在请求中看到这个文件的内容</p><p>我们预期是效果应该是通过浏览器来下载这个文件</p><p>问题不大，我们写一个小小的函数简单的解决这个问题</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> streamToDownloadFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BlobPart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;application/octet-stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([data], { type });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blob);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 重命名文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.download </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  link.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">revokeObjectURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> download</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;download&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/download/foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 触发浏览器下载机制</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    streamToDownloadFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>注意，<code>download</code>属性是<code>HTML5</code>的新特性</p></blockquote><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023143054.png" alt="20231023143054"></p><p>这样子我们的问题就解决了，当用户点击“<strong>下载文件</strong>”时，浏览器会自动把文件下载到客户端上面</p><p>在代码中我们写了一个<code>streamToDownloadFile</code>函数，实现了将文件数据转换为可下载的文件并触发下载操作</p><p>主要步骤分为：</p><ol><li>通过外部传入的文件数据和类型创建一个<code>Blob</code>对象</li><li>利用<code>createObjectURL</code>创建临时<code>url</code>，引用<code>Blob</code>对象的内容</li><li>创建a标签，设定href和download属性</li><li>通过click事件，触发浏览器下载机制</li><li>最后，使用<code>revokeObjectURL</code>释放之前创建的临时<code>URL</code>，以防止内存泄漏</li></ol><h3 id="返回链接下载" tabindex="-1">返回链接下载 <a class="header-anchor" href="#返回链接下载" aria-label="Permalink to &quot;返回链接下载&quot;">​</a></h3><p>除了后端返回文件流的方式，后端也可以返回一个文件地址给前端，然后前端根据文件地址请求触发浏览器下载</p><p>我们来模拟一下，这个场景</p><p>配置一下<code>koa2</code>静态文件访问，需要安装<code>pnpm add koa-static</code>这个包来实现静态资源的问题</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023151438.png" alt="20231023151438"></p><blockquote><p>这里，我们会遇到一个比较常见的问题，在<code>pdf</code>、<code>txt</code>、<code>jpg</code>等文件用<code>a</code>标签直接用<code>href</code>属性，是不能实现下载功能的，浏览器会直接识别并显示这些文件</p></blockquote><p>我们再写一个返回<code>sheet.xlsx</code>文件的地址的<code>Api</code>提供给前端使用</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023160606.png" alt="20231023160606"></p><p>我们在前端请求下这个<code>Api</code>，我们可以得到一个对象，包括文件名，下载文件链接（有点废话..）</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023160658.png" alt="20231023160658"></p><p>这种情况下，我们要采用和上面一样的方法去处理这些格式文件去下载，所以我们这里把文件改为<code>xlsx</code>文件进行测试</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20231023160317.png" alt="20231023160317"></p><p>因为我的电脑上之前的安装了迅雷的扩展，所以默认有下载任务会被迅雷接管下载</p><p>这样，我们就实现了通过<code>URL</code>的方式来下载文件</p><p>相比前面通过文件流下载文件的方式，这个方法会比较简单一些，不过有时候可能也会出现一些小<code>Bug</code>，例如跳转后没有下载问题，而是打开文件</p><p><code>Demo</code>地址：<a href="https://github.com/QC2168/file-download-demo" target="_blank" rel="noreferrer">file-download-demo</a></p>`,39),e=[p];function l(h,k,o,d,r,c){return i(),a("div",null,e)}const y=s(t,[["render",l]]);export{g as __pageData,y as default};
