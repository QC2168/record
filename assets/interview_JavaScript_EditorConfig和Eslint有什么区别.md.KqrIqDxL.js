import{_ as e,o,c as i,R as t}from"./chunks/framework.sdpcv3_n.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/JavaScript/EditorConfig和Eslint有什么区别.md","filePath":"interview/JavaScript/EditorConfig和Eslint有什么区别.md"}'),a={name:"interview/JavaScript/EditorConfig和Eslint有什么区别.md"},n=t(`<h2 id="editorconfig和eslint有什么区别" tabindex="-1">EditorConfig和Eslint有什么区别 <a class="header-anchor" href="#editorconfig和eslint有什么区别" aria-label="Permalink to &quot;EditorConfig和Eslint有什么区别&quot;">​</a></h2><h3 id="editorconfig" tabindex="-1">EditorConfig <a class="header-anchor" href="#editorconfig" aria-label="Permalink to &quot;EditorConfig&quot;">​</a></h3><p><a href="https://editorconfig.org/" target="_blank" rel="noreferrer"><code>editorConfig</code></a>，顾名思义就是编辑器的配置文件，当在项目中配置了<code>editorConfig</code>文件，编辑器在格式化时会根据配置文件遵循定义的样式，解决在不同<code>IDE</code>之间格式化代码的样式</p><p>聊一个比较典型的问题，那就是代码缩进，你会使用空格还是Tab键来进行缩进代码，另外还可能会涉及到文件定义换行符配置，是使用<code>lf</code>、<code>cr</code>还是<code>crlf</code>？</p><p><code>editorConfig</code>的出现就是要来解决这一类问题的，统一代码文件的代码样式，避免在开发的过程中出现一个文件一种代码样式的问题</p><h4 id="插件支持" tabindex="-1">插件支持 <a class="header-anchor" href="#插件支持" aria-label="Permalink to &quot;插件支持&quot;">​</a></h4><p>如果你是使用<code>vscode</code>，它没有内置<code>EditorConfig</code>的插件，我们需要手动安装一下<code>EditorConfig for VS Code</code>插件</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230630152840.png" alt="20230630152840"></p><h3 id="eslint" tabindex="-1">ESLINT <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLINT&quot;">​</a></h3><p><a href="https://eslint.org/" target="_blank" rel="noreferrer"><code>eslint</code></a>也是一个约束代码的，但是它和上面的<code>editorconfig</code>有所区别，<code>eslint</code>它更倾向于代码的质量和样式</p><h4 id="代码质量" tabindex="-1">代码质量 <a class="header-anchor" href="#代码质量" aria-label="Permalink to &quot;代码质量&quot;">​</a></h4><p>例如，我们声明了一个<code>foo</code>变量，但是我们在代码中并没有使用到它，又或者我们在写等号判断时，写成了<code>==</code>，而不是更严谨的<code>===</code></p><h4 id="代码样式" tabindex="-1">代码样式 <a class="header-anchor" href="#代码样式" aria-label="Permalink to &quot;代码样式&quot;">​</a></h4><p>例如，对象属性结尾是否要追加逗号，代码之间的空格间隔，字符串使用单引号，双引号之类的</p><p>以上所提到的这些规则，我们都是可以在<code>eslintrc</code>配置文件中的<code>rules</code>自行配置的</p><p>但在日常的项目开发中，我们会直接使用官方预设好的扩展，不需要自己手动去配置每一条规则，下面的代码，使用的是<code>eslint</code>官方推荐的<code>rules</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint:recommended&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="插件支持-1" tabindex="-1">插件支持 <a class="header-anchor" href="#插件支持-1" aria-label="Permalink to &quot;插件支持&quot;">​</a></h4><p>同样的，<code>vscode</code>没有内置<code>EditorConfig</code>的插件，我们需要手动安装一下<code>ESLint</code>插件来实现代码校验</p><p><img src="https://raw.githubusercontent.com/QC2168/note-img/main/20230630163037.png" alt="20230630163037"></p>`,20),d=[n];function r(s,c,l,h,p,g){return o(),i("div",null,d)}const _=e(a,[["render",r]]);export{E as __pageData,_ as default};
