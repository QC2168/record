import{_ as s,o as a,c as t,R as i}from"./chunks/framework.qjNjGLUL.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"utils/useCharts.md","filePath":"utils/useCharts.md"}'),e={name:"utils/useCharts.md"},n=i(`<h2 id="usecharts" tabindex="-1">useCharts <a class="header-anchor" href="#usecharts" aria-label="Permalink to &quot;useCharts&quot;">​</a></h2><h3 id="📖-介绍" tabindex="-1">📖 介绍 <a class="header-anchor" href="#📖-介绍" aria-label="Permalink to &quot;📖 介绍&quot;">​</a></h3><p>基于<code>VueCPA</code>二次封装的<code>useCharts</code>，让您在使用<code>echarts</code>绘制图表时更快更简单！</p><h3 id="🌈-功能" tabindex="-1">🌈 功能 <a class="header-anchor" href="#🌈-功能" aria-label="Permalink to &quot;🌈 功能&quot;">​</a></h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 自适应图表大小</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Loading效果</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 自定义主题样式</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 自定义渲染模式</li></ul><h3 id="📦-安装" tabindex="-1">📦 安装 <a class="header-anchor" href="#📦-安装" aria-label="Permalink to &quot;📦 安装&quot;">​</a></h3><blockquote><p>pnpm (推荐使用pnpm包，当然也要遵循当前项目包管理工具约束哦)</p></blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--fUrD" id="tab-N3YFQF3" checked="checked"><label for="tab-N3YFQF3">pnpm</label><input type="radio" name="group--fUrD" id="tab-x4_Wz6N"><label for="tab-x4_Wz6N">yarn</label><input type="radio" name="group--fUrD" id="tab-jS837CL"><label for="tab-jS837CL">npm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echarts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @qc2168/use-charts</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echarts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @qc2168/use-charts</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echarts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @qc2168/use-charts</span></span></code></pre></div></div></div><h3 id="🤖-例子" tabindex="-1">🤖 例子 <a class="header-anchor" href="#🤖-例子" aria-label="Permalink to &quot;🤖 例子&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// template</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 定义一个Div元素，并设置宽高 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chartEl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// script setup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import useChart from &quot;@qc2168/use-charts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//  provide a element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const chartEl = ref&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HTMLDivElement</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(null)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setOption,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showLoading,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} = useChart(chartEl as Ref&lt;HTMLDivElement&gt;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onMounted(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nextTick(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // turn on chart loading ~</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        showLoading()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // setOption</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        setOption({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            /* set data ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://github.com/QC2168/useCharts/tree/main/example" target="_blank" rel="noreferrer">查看完整的演示代码</a></p><h3 id="🛠️-选项" tabindex="-1">🛠️ 选项 <a class="header-anchor" href="#🛠️-选项" aria-label="Permalink to &quot;🛠️ 选项&quot;">​</a></h3><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>必选</th></tr></thead><tbody><tr><td>elRef</td><td>渲染<code>Dom</code>元素</td><td><code>Ref&lt;HTMLDivElement&gt;</code></td><td><code>true</code></td></tr><tr><td>Options</td><td>见<code>Options</code>类型</td><td><code>OptionsType</code></td><td><code>false</code></td></tr></tbody></table><h4 id="🛠️-options类型" tabindex="-1">🛠️ Options类型 <a class="header-anchor" href="#🛠️-options类型" aria-label="Permalink to &quot;🛠️ Options类型&quot;">​</a></h4><table><thead><tr><th>属性</th><th><div style="width:130px;">描述</div></th><th>类型</th><th>必选</th><th>默认值</th></tr></thead><tbody><tr><td>render</td><td>渲染模式</td><td><code>RenderType.SVGRenderer/RenderType.CanvasRenderer</code></td><td><code>false</code></td><td><code>RenderType.SVGRenderer</code></td></tr><tr><td>autoChartSize</td><td>自动监听元素大小</td><td><code>boolean</code></td><td><code>false</code></td><td><code>false</code></td></tr><tr><td>animation</td><td>见<code>Animation</code>类型</td><td><code>AnimationType</code></td><td><code>false</code></td><td><code>{}</code></td></tr><tr><td>theme</td><td>图表主题</td><td><code>ThemeType.Light/ThemeType.Dark/ThemeType.Default</code></td><td><code>false</code></td><td><code>ThemeType.Default</code></td></tr></tbody></table><h4 id="🛠️-animation类型" tabindex="-1">🛠️ Animation类型 <a class="header-anchor" href="#🛠️-animation类型" aria-label="Permalink to &quot;🛠️ Animation类型&quot;">​</a></h4><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>必选</th><th>默认值</th></tr></thead><tbody><tr><td>enable</td><td>开启过渡动画</td><td><code>boolean</code></td><td><code>false</code></td><td>空</td></tr><tr><td>styles</td><td>过渡样式</td><td><code>Object</code></td><td><code>false</code></td><td>空</td></tr></tbody></table>`,17),l=[n];function h(d,p,c,k,r,o){return a(),t("div",null,l)}const u=s(e,[["render",h]]);export{g as __pageData,u as default};
