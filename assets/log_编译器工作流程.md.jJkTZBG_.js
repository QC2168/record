import{_ as t,o as e,c as o,R as s}from"./chunks/framework.sdpcv3_n.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"log/编译器工作流程.md","filePath":"log/编译器工作流程.md"}'),n={name:"log/编译器工作流程.md"},r=s('<p>这是一个描述编译器工作流程的简单模型，其中涉及了几个重要的概念：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Source Text --&gt; Lexer --&gt; Token --&gt; Parser --&gt; AST</span></span></code></pre></div><ol><li><p><strong>Source Text（源代码文本）：</strong> 这是你编写的程序的原始文本形式，通常是由程序员编写的代码文件。</p></li><li><p><strong>Lexer（词法分析器）：</strong> 词法分析是编译器的第一步，它负责将源代码文本分解成一个个称为 &quot;Token&quot; 的词法单元。Token 是代码的最小语法单位，可能是关键字、标识符、运算符、数字、字符串等。</p></li><li><p><strong>Token：</strong> Token 是由词法分析器生成的，代表源代码中的一个个离散的词法单元。每个 Token 包含有关这个单元的信息，如类型、值等。</p></li><li><p><strong>Parser（语法分析器）：</strong> 语法分析是编译器的下一步，它接收词法分析器生成的 Token 流，然后将其组织成一个抽象语法树（Abstract Syntax Tree，AST）。语法分析器通过识别代码的语法结构和语法规则来进行解析。</p></li><li><p><strong>AST（抽象语法树）：</strong> AST 是编译器中用于表示源代码抽象结构的一种树形数据结构。它反映了代码的层次结构，每个节点代表源代码的一个构造，如语句、表达式、函数等。AST 是编译器进一步处理和生成目标代码的基础。</p></li></ol><hr><p>工作流程可以简化为以下步骤：</p><ol><li><strong>词法分析：</strong> 将源代码文本转换为 Token 流。</li><li><strong>语法分析：</strong> 使用 Token 流构建 AST。</li><li><strong>进一步处理：</strong> 编译器可以使用 AST 进行进一步的静态分析、优化和生成目标代码。</li></ol><p>这个模型描述了编译器是如何从源代码开始，通过词法分析和语法分析，最终生成抽象语法树，为后续编译步骤提供了基础。这是编译器在编程语言处理过程中的一般工作流程。</p>',7),a=[r];function l(i,p,_,c,g,T){return e(),o("div",null,a)}const h=t(n,[["render",l]]);export{S as __pageData,h as default};
