import{_ as e,c as t,o as a,O as r}from"./chunks/framework.488fce0c.js";const u=JSON.parse('{"title":"V8垃圾回收机制","description":"","frontmatter":{"title":"V8垃圾回收机制","tags":["Browser"]},"headers":[],"relativePath":"interview/Browser/V8垃圾回收机制.md"}'),o={name:"interview/Browser/V8垃圾回收机制.md"},i=r('<h2 id="v8垃圾回收机制" tabindex="-1">V8垃圾回收机制 <a class="header-anchor" href="#v8垃圾回收机制" aria-label="Permalink to &quot;V8垃圾回收机制&quot;">​</a></h2><p>V8内存管理中主要分为两个部分，新生代和老生代。</p><p>新生代中存放的对象为时间较短的对象，旧生代存放的是时间较久的对象</p><p>新生代是由Form和To两个区域组成</p><ul><li>在64位系统里，新生代内存是32M，Form和To区域各占16M</li><li>在32位系统里，新生代内存是16M，Form和To区域各占8M</li></ul><p>新生代回收策略</p><p>老生代</p><ul><li>在64位系统里，内存是1400M(1.4G)</li><li>在32位系统里，内存是700M(0.7G)</li></ul><h3 id="代际假说" tabindex="-1">代际假说 <a class="header-anchor" href="#代际假说" aria-label="Permalink to &quot;代际假说&quot;">​</a></h3><p>这是V8中比较重要的术语，表示很多对象在内存中存在的时间很短，内存中的对象一经分配，内存空间就变得不可访问的了。（这个说法适用了大多数的动态语言，不止V8和JS）</p>',10),_=[i];function l(s,n,c,p,d,h){return a(),t("div",null,_)}const V=e(o,[["render",l]]);export{u as __pageData,V as default};
