import{_ as e,o,c as d,a as c}from"./app.5b1017d0.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vue实例挂载过程中发生了什么","slug":"vue实例挂载过程中发生了什么","link":"#vue实例挂载过程中发生了什么","children":[]},{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]}],"relativePath":"interview/Vue/Vue实例挂载过程中发生了什么.md"}'),t={name:"interview/Vue/Vue实例挂载过程中发生了什么.md"},n=c('<h2 id="vue实例挂载过程中发生了什么" tabindex="-1">Vue实例挂载过程中发生了什么 <a class="header-anchor" href="#vue实例挂载过程中发生了什么" aria-hidden="true">#</a></h2><p>挂载指的是在<code>app.mount()</code>调用时的整个过程</p><h2 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-hidden="true">#</a></h2><ul><li>首先获取挂载点的<code>DOM</code>元素，然后去清空<code>html</code></li><li><code>mount</code><ul><li>开始创建<code>node</code>元素</li><li>触发<code>render</code>函数 <ul><li><code>patch(rootVNode)</code><ul><li>处理组件类型（<code>Text</code>，<code>Comment</code>，<code>Fragment</code>，<code>Component</code>）</li><li>如果是<code>components</code>，会进行组件的实例化（<code>createComponentInstance</code>-&gt;<code>setupComponent</code>），双向绑定过程（<code>setupRenderEffect</code>） <ul><li>在<code>setupComponent</code>里还会进行初始化<code>Props</code>，<code>slots</code>（<code>initProps</code>，<code>initSlots</code>）</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="mount" tabindex="-1">mount <a class="header-anchor" href="#mount" aria-hidden="true">#</a></h4><p>首先会先调用<code>normalizeContainer()</code>获取到<code>dom</code>挂载元素的位置，之后再调用<code>mount</code>去执行挂载</p><p>这里的<code>mounted</code>函数会先创建<code>VNode</code>根节点，调用render函数将<code>VNode</code>转换为真实的<code>DOM</code>元素</p><h4 id="patch" tabindex="-1">patch <a class="header-anchor" href="#patch" aria-hidden="true">#</a></h4><p>在初始化的过程中，进行<code>VNode</code>对比，根据得出来的结果创建节点并挂载到<code>DOM</code>中</p><h4 id="mountcomponent" tabindex="-1">mountComponent <a class="header-anchor" href="#mountcomponent" aria-hidden="true">#</a></h4><p>用于实例化组件，并完成数据与<code>VNode</code>的双向绑定</p><p>主要执行了初始化<code>Props</code>属性（<code>initProps</code>），初始化插槽（<code>initSlots</code>），执行<code>setup</code>中的代码内容并到<code>template</code>中的模板编译成<code>render</code>渲染函数，到最后执行<code>onMounted</code>钩子函数，表示已经挂载完毕（如果组件中还有组件，会递归调用<code>patch</code>函数）</p>',12),a=[n];function i(r,l,u,p,s,h){return o(),d("div",null,a)}const V=e(t,[["render",i]]);export{m as __pageData,V as default};
